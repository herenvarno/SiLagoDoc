{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to SiLago Documentation Abstract This website hosts the all the documentation of SiLago project. Hardware RISC V : Assigned to Riccardo Tool Chain Vesyla tutorial Vesyla programming guide Algorithmic Library BLAS Library : Assigned to Yu Neural Network Library : Assigned to Guido Interleaver Library : Assigned to Weijiang FFT Library : Assigned to Usman","title":"Home"},{"location":"#welcome-to-silago-documentation","text":"Abstract This website hosts the all the documentation of SiLago project.","title":"Welcome to SiLago Documentation"},{"location":"#hardware","text":"RISC V : Assigned to Riccardo","title":"Hardware"},{"location":"#tool-chain","text":"Vesyla tutorial Vesyla programming guide","title":"Tool Chain"},{"location":"#algorithmic-library","text":"BLAS Library : Assigned to Yu Neural Network Library : Assigned to Guido Interleaver Library : Assigned to Weijiang FFT Library : Assigned to Usman","title":"Algorithmic Library"},{"location":"About/About/","text":"About Contributors Yu Yang : yuyang2@kth.se Dimitrios Stathis : stathis@kth.se","title":"About"},{"location":"About/About/#about","text":"","title":"About"},{"location":"About/About/#contributors","text":"Yu Yang : yuyang2@kth.se Dimitrios Stathis : stathis@kth.se","title":"Contributors"},{"location":"About/License/","text":"License This documentation is licensed under GNU Free Documentation License . A full legal document is listed below. You can also check the license contents from the official website: https://www.gnu.org/licenses/fdl.htmlree Documentation License Version 1.3, 3 November 2008 Copyright (C) 2000, 2001, 2002, 2007, 2008 Free Software Foundation, Inc. <https://fsf.org/> Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed. 0. PREAMBLE The purpose of this License is to make a manual, textbook, or other functional and useful document \"free\" in the sense of freedom: to assure everyone the effective freedom to copy and redistribute it, with or without modifying it, either commercially or noncommercially. Secondarily, this License preserves for the author and publisher a way to get credit for their work, while not being considered responsible for modifications made by others. This License is a kind of \"copyleft\", which means that derivative works of the document must themselves be free in the same sense. It complements the GNU General Public License, which is a copyleft license designed for free software. We have designed this License in order to use it for manuals for free software, because free software needs free documentation: a free program should come with manuals providing the same freedoms that the software does. But this License is not limited to software manuals; it can be used for any textual work, regardless of subject matter or whether it is published as a printed book. We recommend this License principally for works whose purpose is instruction or reference. 1. APPLICABILITY AND DEFINITIONS This License applies to any manual or other work, in any medium, that contains a notice placed by the copyright holder saying it can be distributed under the terms of this License. Such a notice grants a world-wide, royalty-free license, unlimited in duration, to use that work under the conditions stated herein. The \"Document\", below, refers to any such manual or work. Any member of the public is a licensee, and is addressed as \"you\". You accept the license if you copy, modify or distribute the work in a way requiring permission under copyright law. A \"Modified Version\" of the Document means any work containing the Document or a portion of it, either copied verbatim, or with modifications and/or translated into another language. A \"Secondary Section\" is a named appendix or a front-matter section of the Document that deals exclusively with the relationship of the publishers or authors of the Document to the Document's overall subject (or to related matters) and contains nothing that could fall directly within that overall subject. (Thus, if the Document is in part a textbook of mathematics, a Secondary Section may not explain any mathematics.) The relationship could be a matter of historical connection with the subject or with related matters, or of legal, commercial, philosophical, ethical or political position regarding them. The \"Invariant Sections\" are certain Secondary Sections whose titles are designated, as being those of Invariant Sections, in the notice that says that the Document is released under this License. If a section does not fit the above definition of Secondary then it is not allowed to be designated as Invariant. The Document may contain zero Invariant Sections. If the Document does not identify any Invariant Sections then there are none. The \"Cover Texts\" are certain short passages of text that are listed, as Front-Cover Texts or Back-Cover Texts, in the notice that says that the Document is released under this License. A Front-Cover Text may be at most 5 words, and a Back-Cover Text may be at most 25 words. A \"Transparent\" copy of the Document means a machine-readable copy, represented in a format whose specification is available to the general public, that is suitable for revising the document straightforwardly with generic text editors or (for images composed of pixels) generic paint programs or (for drawings) some widely available drawing editor, and that is suitable for input to text formatters or for automatic translation to a variety of formats suitable for input to text formatters. A copy made in an otherwise Transparent file format whose markup, or absence of markup, has been arranged to thwart or discourage subsequent modification by readers is not Transparent. An image format is not Transparent if used for any substantial amount of text. A copy that is not \"Transparent\" is called \"Opaque\". Examples of suitable formats for Transparent copies include plain ASCII without markup, Texinfo input format, LaTeX input format, SGML or XML using a publicly available DTD, and standard-conforming simple HTML, PostScript or PDF designed for human modification. Examples of transparent image formats include PNG, XCF and JPG. Opaque formats include proprietary formats that can be read and edited only by proprietary word processors, SGML or XML for which the DTD and/or processing tools are not generally available, and the machine-generated HTML, PostScript or PDF produced by some word processors for output purposes only. The \"Title Page\" means, for a printed book, the title page itself, plus such following pages as are needed to hold, legibly, the material this License requires to appear in the title page. For works in formats which do not have any title page as such, \"Title Page\" means the text near the most prominent appearance of the work's title, preceding the beginning of the body of the text. The \"publisher\" means any person or entity that distributes copies of the Document to the public. A section \"Entitled XYZ\" means a named subunit of the Document whose title either is precisely XYZ or contains XYZ in parentheses following text that translates XYZ in another language. (Here XYZ stands for a specific section name mentioned below, such as \"Acknowledgements\", \"Dedications\", \"Endorsements\", or \"History\".) To \"Preserve the Title\" of such a section when you modify the Document means that it remains a section \"Entitled XYZ\" according to this definition. The Document may include Warranty Disclaimers next to the notice which states that this License applies to the Document. These Warranty Disclaimers are considered to be included by reference in this License, but only as regards disclaiming warranties: any other implication that these Warranty Disclaimers may have is void and has no effect on the meaning of this License. 2. VERBATIM COPYING You may copy and distribute the Document in any medium, either commercially or noncommercially, provided that this License, the copyright notices, and the license notice saying this License applies to the Document are reproduced in all copies, and that you add no other conditions whatsoever to those of this License. You may not use technical measures to obstruct or control the reading or further copying of the copies you make or distribute. However, you may accept compensation in exchange for copies. If you distribute a large enough number of copies you must also follow the conditions in section 3. You may also lend copies, under the same conditions stated above, and you may publicly display copies. 3. COPYING IN QUANTITY If you publish printed copies (or copies in media that commonly have printed covers) of the Document, numbering more than 100, and the Document's license notice requires Cover Texts, you must enclose the copies in covers that carry, clearly and legibly, all these Cover Texts: Front-Cover Texts on the front cover, and Back-Cover Texts on the back cover. Both covers must also clearly and legibly identify you as the publisher of these copies. The front cover must present the full title with all words of the title equally prominent and visible. You may add other material on the covers in addition. Copying with changes limited to the covers, as long as they preserve the title of the Document and satisfy these conditions, can be treated as verbatim copying in other respects. If the required texts for either cover are too voluminous to fit legibly, you should put the first ones listed (as many as fit reasonably) on the actual cover, and continue the rest onto adjacent pages. If you publish or distribute Opaque copies of the Document numbering more than 100, you must either include a machine-readable Transparent copy along with each Opaque copy, or state in or with each Opaque copy a computer-network location from which the general network-using public has access to download using public-standard network protocols a complete Transparent copy of the Document, free of added material. If you use the latter option, you must take reasonably prudent steps, when you begin distribution of Opaque copies in quantity, to ensure that this Transparent copy will remain thus accessible at the stated location until at least one year after the last time you distribute an Opaque copy (directly or through your agents or retailers) of that edition to the public. It is requested, but not required, that you contact the authors of the Document well before redistributing any large number of copies, to give them a chance to provide you with an updated version of the Document. 4. MODIFICATIONS You may copy and distribute a Modified Version of the Document under the conditions of sections 2 and 3 above, provided that you release the Modified Version under precisely this License, with the Modified Version filling the role of the Document, thus licensing distribution and modification of the Modified Version to whoever possesses a copy of it. In addition, you must do these things in the Modified Version: A. Use in the Title Page (and on the covers, if any) a title distinct from that of the Document, and from those of previous versions (which should, if there were any, be listed in the History section of the Document). You may use the same title as a previous version if the original publisher of that version gives permission. B. List on the Title Page, as authors, one or more persons or entities responsible for authorship of the modifications in the Modified Version, together with at least five of the principal authors of the Document (all of its principal authors, if it has fewer than five), unless they release you from this requirement. C. State on the Title page the name of the publisher of the Modified Version, as the publisher. D. Preserve all the copyright notices of the Document. E. Add an appropriate copyright notice for your modifications adjacent to the other copyright notices. F. Include, immediately after the copyright notices, a license notice giving the public permission to use the Modified Version under the terms of this License, in the form shown in the Addendum below. G. Preserve in that license notice the full lists of Invariant Sections and required Cover Texts given in the Document's license notice. H. Include an unaltered copy of this License. I. Preserve the section Entitled \"History\", Preserve its Title, and add to it an item stating at least the title, year, new authors, and publisher of the Modified Version as given on the Title Page. If there is no section Entitled \"History\" in the Document, create one stating the title, year, authors, and publisher of the Document as given on its Title Page, then add an item describing the Modified Version as stated in the previous sentence. J. Preserve the network location, if any, given in the Document for public access to a Transparent copy of the Document, and likewise the network locations given in the Document for previous versions it was based on. These may be placed in the \"History\" section. You may omit a network location for a work that was published at least four years before the Document itself, or if the original publisher of the version it refers to gives permission. K. For any section Entitled \"Acknowledgements\" or \"Dedications\", Preserve the Title of the section, and preserve in the section all the substance and tone of each of the contributor acknowledgements and/or dedications given therein. L. Preserve all the Invariant Sections of the Document, unaltered in their text and in their titles. Section numbers or the equivalent are not considered part of the section titles. M. Delete any section Entitled \"Endorsements\". Such a section may not be included in the Modified Version. N. Do not retitle any existing section to be Entitled \"Endorsements\" or to conflict in title with any Invariant Section. O. Preserve any Warranty Disclaimers. If the Modified Version includes new front-matter sections or appendices that qualify as Secondary Sections and contain no material copied from the Document, you may at your option designate some or all of these sections as invariant. To do this, add their titles to the list of Invariant Sections in the Modified Version's license notice. These titles must be distinct from any other section titles. You may add a section Entitled \"Endorsements\", provided it contains nothing but endorsements of your Modified Version by various parties--for example, statements of peer review or that the text has been approved by an organization as the authoritative definition of a standard. You may add a passage of up to five words as a Front-Cover Text, and a passage of up to 25 words as a Back-Cover Text, to the end of the list of Cover Texts in the Modified Version. Only one passage of Front-Cover Text and one of Back-Cover Text may be added by (or through arrangements made by) any one entity. If the Document already includes a cover text for the same cover, previously added by you or by arrangement made by the same entity you are acting on behalf of, you may not add another; but you may replace the old one, on explicit permission from the previous publisher that added the old one. The author(s) and publisher(s) of the Document do not by this License give permission to use their names for publicity for or to assert or imply endorsement of any Modified Version. 5. COMBINING DOCUMENTS You may combine the Document with other documents released under this License, under the terms defined in section 4 above for modified versions, provided that you include in the combination all of the Invariant Sections of all of the original documents, unmodified, and list them all as Invariant Sections of your combined work in its license notice, and that you preserve all their Warranty Disclaimers. The combined work need only contain one copy of this License, and multiple identical Invariant Sections may be replaced with a single copy. If there are multiple Invariant Sections with the same name but different contents, make the title of each such section unique by adding at the end of it, in parentheses, the name of the original author or publisher of that section if known, or else a unique number. Make the same adjustment to the section titles in the list of Invariant Sections in the license notice of the combined work. In the combination, you must combine any sections Entitled \"History\" in the various original documents, forming one section Entitled \"History\"; likewise combine any sections Entitled \"Acknowledgements\", and any sections Entitled \"Dedications\". You must delete all sections Entitled \"Endorsements\". 6. COLLECTIONS OF DOCUMENTS You may make a collection consisting of the Document and other documents released under this License, and replace the individual copies of this License in the various documents with a single copy that is included in the collection, provided that you follow the rules of this License for verbatim copying of each of the documents in all other respects. You may extract a single document from such a collection, and distribute it individually under this License, provided you insert a copy of this License into the extracted document, and follow this License in all other respects regarding verbatim copying of that document. 7. AGGREGATION WITH INDEPENDENT WORKS A compilation of the Document or its derivatives with other separate and independent documents or works, in or on a volume of a storage or distribution medium, is called an \"aggregate\" if the copyright resulting from the compilation is not used to limit the legal rights of the compilation's users beyond what the individual works permit. When the Document is included in an aggregate, this License does not apply to the other works in the aggregate which are not themselves derivative works of the Document. If the Cover Text requirement of section 3 is applicable to these copies of the Document, then if the Document is less than one half of the entire aggregate, the Document's Cover Texts may be placed on covers that bracket the Document within the aggregate, or the electronic equivalent of covers if the Document is in electronic form. Otherwise they must appear on printed covers that bracket the whole aggregate. 8. TRANSLATION Translation is considered a kind of modification, so you may distribute translations of the Document under the terms of section 4. Replacing Invariant Sections with translations requires special permission from their copyright holders, but you may include translations of some or all Invariant Sections in addition to the original versions of these Invariant Sections. You may include a translation of this License, and all the license notices in the Document, and any Warranty Disclaimers, provided that you also include the original English version of this License and the original versions of those notices and disclaimers. In case of a disagreement between the translation and the original version of this License or a notice or disclaimer, the original version will prevail. If a section in the Document is Entitled \"Acknowledgements\", \"Dedications\", or \"History\", the requirement (section 4) to Preserve its Title (section 1) will typically require changing the actual title. 9. TERMINATION You may not copy, modify, sublicense, or distribute the Document except as expressly provided under this License. Any attempt otherwise to copy, modify, sublicense, or distribute it is void, and will automatically terminate your rights under this License. However, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation. Moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice. Termination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this License. If your rights have been terminated and not permanently reinstated, receipt of a copy of some or all of the same material does not give you any rights to use it. 10. FUTURE REVISIONS OF THIS LICENSE The Free Software Foundation may publish new, revised versions of the GNU Free Documentation License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns. See https://www.gnu.org/licenses/. Each version of the License is given a distinguishing version number. If the Document specifies that a particular numbered version of this License \"or any later version\" applies to it, you have the option of following the terms and conditions either of that specified version or of any later version that has been published (not as a draft) by the Free Software Foundation. If the Document does not specify a version number of this License, you may choose any version ever published (not as a draft) by the Free Software Foundation. If the Document specifies that a proxy can decide which future versions of this License can be used, that proxy's public statement of acceptance of a version permanently authorizes you to choose that version for the Document. 11. RELICENSING \"Massive Multiauthor Collaboration Site\" (or \"MMC Site\") means any World Wide Web server that publishes copyrightable works and also provides prominent facilities for anybody to edit those works. A public wiki that anybody can edit is an example of such a server. A \"Massive Multiauthor Collaboration\" (or \"MMC\") contained in the site means any set of copyrightable works thus published on the MMC site. \"CC-BY-SA\" means the Creative Commons Attribution-Share Alike 3.0 license published by Creative Commons Corporation, a not-for-profit corporation with a principal place of business in San Francisco, California, as well as future copyleft versions of that license published by that same organization. \"Incorporate\" means to publish or republish a Document, in whole or in part, as part of another Document. An MMC is \"eligible for relicensing\" if it is licensed under this License, and if all works that were first published under this License somewhere other than this MMC, and subsequently incorporated in whole or in part into the MMC, (1) had no cover texts or invariant sections, and (2) were thus incorporated prior to November 1, 2008. The operator of an MMC Site may republish an MMC contained in the site under CC-BY-SA on the same site at any time before August 1, 2009, provided the MMC is eligible for relicensing. ADDENDUM: How to use this License for your documents To use this License in a document you have written, include a copy of the License in the document and put the following copyright and license notices just after the title page: Copyright (c) YEAR YOUR NAME. Permission is granted to copy, distribute and/or modify this document under the terms of the GNU Free Documentation License, Version 1.3 or any later version published by the Free Software Foundation; with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts. A copy of the license is included in the section entitled \"GNU Free Documentation License\". If you have Invariant Sections, Front-Cover Texts and Back-Cover Texts, replace the \"with...Texts.\" line with this: with the Invariant Sections being LIST THEIR TITLES, with the Front-Cover Texts being LIST, and with the Back-Cover Texts being LIST. If you have Invariant Sections without Cover Texts, or some other combination of the three, merge those two alternatives to suit the situation. If your document contains nontrivial examples of program code, we recommend releasing these examples in parallel under your choice of free software license, such as the GNU General Public License, to permit their use in free software.","title":"License"},{"location":"About/License/#license","text":"This documentation is licensed under GNU Free Documentation License . A full legal document is listed below. You can also check the license contents from the official website: https://www.gnu.org/licenses/fdl.htmlree Documentation License Version 1.3, 3 November 2008 Copyright (C) 2000, 2001, 2002, 2007, 2008 Free Software Foundation, Inc. <https://fsf.org/> Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed. 0. PREAMBLE The purpose of this License is to make a manual, textbook, or other functional and useful document \"free\" in the sense of freedom: to assure everyone the effective freedom to copy and redistribute it, with or without modifying it, either commercially or noncommercially. Secondarily, this License preserves for the author and publisher a way to get credit for their work, while not being considered responsible for modifications made by others. This License is a kind of \"copyleft\", which means that derivative works of the document must themselves be free in the same sense. It complements the GNU General Public License, which is a copyleft license designed for free software. We have designed this License in order to use it for manuals for free software, because free software needs free documentation: a free program should come with manuals providing the same freedoms that the software does. But this License is not limited to software manuals; it can be used for any textual work, regardless of subject matter or whether it is published as a printed book. We recommend this License principally for works whose purpose is instruction or reference. 1. APPLICABILITY AND DEFINITIONS This License applies to any manual or other work, in any medium, that contains a notice placed by the copyright holder saying it can be distributed under the terms of this License. Such a notice grants a world-wide, royalty-free license, unlimited in duration, to use that work under the conditions stated herein. The \"Document\", below, refers to any such manual or work. Any member of the public is a licensee, and is addressed as \"you\". You accept the license if you copy, modify or distribute the work in a way requiring permission under copyright law. A \"Modified Version\" of the Document means any work containing the Document or a portion of it, either copied verbatim, or with modifications and/or translated into another language. A \"Secondary Section\" is a named appendix or a front-matter section of the Document that deals exclusively with the relationship of the publishers or authors of the Document to the Document's overall subject (or to related matters) and contains nothing that could fall directly within that overall subject. (Thus, if the Document is in part a textbook of mathematics, a Secondary Section may not explain any mathematics.) The relationship could be a matter of historical connection with the subject or with related matters, or of legal, commercial, philosophical, ethical or political position regarding them. The \"Invariant Sections\" are certain Secondary Sections whose titles are designated, as being those of Invariant Sections, in the notice that says that the Document is released under this License. If a section does not fit the above definition of Secondary then it is not allowed to be designated as Invariant. The Document may contain zero Invariant Sections. If the Document does not identify any Invariant Sections then there are none. The \"Cover Texts\" are certain short passages of text that are listed, as Front-Cover Texts or Back-Cover Texts, in the notice that says that the Document is released under this License. A Front-Cover Text may be at most 5 words, and a Back-Cover Text may be at most 25 words. A \"Transparent\" copy of the Document means a machine-readable copy, represented in a format whose specification is available to the general public, that is suitable for revising the document straightforwardly with generic text editors or (for images composed of pixels) generic paint programs or (for drawings) some widely available drawing editor, and that is suitable for input to text formatters or for automatic translation to a variety of formats suitable for input to text formatters. A copy made in an otherwise Transparent file format whose markup, or absence of markup, has been arranged to thwart or discourage subsequent modification by readers is not Transparent. An image format is not Transparent if used for any substantial amount of text. A copy that is not \"Transparent\" is called \"Opaque\". Examples of suitable formats for Transparent copies include plain ASCII without markup, Texinfo input format, LaTeX input format, SGML or XML using a publicly available DTD, and standard-conforming simple HTML, PostScript or PDF designed for human modification. Examples of transparent image formats include PNG, XCF and JPG. Opaque formats include proprietary formats that can be read and edited only by proprietary word processors, SGML or XML for which the DTD and/or processing tools are not generally available, and the machine-generated HTML, PostScript or PDF produced by some word processors for output purposes only. The \"Title Page\" means, for a printed book, the title page itself, plus such following pages as are needed to hold, legibly, the material this License requires to appear in the title page. For works in formats which do not have any title page as such, \"Title Page\" means the text near the most prominent appearance of the work's title, preceding the beginning of the body of the text. The \"publisher\" means any person or entity that distributes copies of the Document to the public. A section \"Entitled XYZ\" means a named subunit of the Document whose title either is precisely XYZ or contains XYZ in parentheses following text that translates XYZ in another language. (Here XYZ stands for a specific section name mentioned below, such as \"Acknowledgements\", \"Dedications\", \"Endorsements\", or \"History\".) To \"Preserve the Title\" of such a section when you modify the Document means that it remains a section \"Entitled XYZ\" according to this definition. The Document may include Warranty Disclaimers next to the notice which states that this License applies to the Document. These Warranty Disclaimers are considered to be included by reference in this License, but only as regards disclaiming warranties: any other implication that these Warranty Disclaimers may have is void and has no effect on the meaning of this License. 2. VERBATIM COPYING You may copy and distribute the Document in any medium, either commercially or noncommercially, provided that this License, the copyright notices, and the license notice saying this License applies to the Document are reproduced in all copies, and that you add no other conditions whatsoever to those of this License. You may not use technical measures to obstruct or control the reading or further copying of the copies you make or distribute. However, you may accept compensation in exchange for copies. If you distribute a large enough number of copies you must also follow the conditions in section 3. You may also lend copies, under the same conditions stated above, and you may publicly display copies. 3. COPYING IN QUANTITY If you publish printed copies (or copies in media that commonly have printed covers) of the Document, numbering more than 100, and the Document's license notice requires Cover Texts, you must enclose the copies in covers that carry, clearly and legibly, all these Cover Texts: Front-Cover Texts on the front cover, and Back-Cover Texts on the back cover. Both covers must also clearly and legibly identify you as the publisher of these copies. The front cover must present the full title with all words of the title equally prominent and visible. You may add other material on the covers in addition. Copying with changes limited to the covers, as long as they preserve the title of the Document and satisfy these conditions, can be treated as verbatim copying in other respects. If the required texts for either cover are too voluminous to fit legibly, you should put the first ones listed (as many as fit reasonably) on the actual cover, and continue the rest onto adjacent pages. If you publish or distribute Opaque copies of the Document numbering more than 100, you must either include a machine-readable Transparent copy along with each Opaque copy, or state in or with each Opaque copy a computer-network location from which the general network-using public has access to download using public-standard network protocols a complete Transparent copy of the Document, free of added material. If you use the latter option, you must take reasonably prudent steps, when you begin distribution of Opaque copies in quantity, to ensure that this Transparent copy will remain thus accessible at the stated location until at least one year after the last time you distribute an Opaque copy (directly or through your agents or retailers) of that edition to the public. It is requested, but not required, that you contact the authors of the Document well before redistributing any large number of copies, to give them a chance to provide you with an updated version of the Document. 4. MODIFICATIONS You may copy and distribute a Modified Version of the Document under the conditions of sections 2 and 3 above, provided that you release the Modified Version under precisely this License, with the Modified Version filling the role of the Document, thus licensing distribution and modification of the Modified Version to whoever possesses a copy of it. In addition, you must do these things in the Modified Version: A. Use in the Title Page (and on the covers, if any) a title distinct from that of the Document, and from those of previous versions (which should, if there were any, be listed in the History section of the Document). You may use the same title as a previous version if the original publisher of that version gives permission. B. List on the Title Page, as authors, one or more persons or entities responsible for authorship of the modifications in the Modified Version, together with at least five of the principal authors of the Document (all of its principal authors, if it has fewer than five), unless they release you from this requirement. C. State on the Title page the name of the publisher of the Modified Version, as the publisher. D. Preserve all the copyright notices of the Document. E. Add an appropriate copyright notice for your modifications adjacent to the other copyright notices. F. Include, immediately after the copyright notices, a license notice giving the public permission to use the Modified Version under the terms of this License, in the form shown in the Addendum below. G. Preserve in that license notice the full lists of Invariant Sections and required Cover Texts given in the Document's license notice. H. Include an unaltered copy of this License. I. Preserve the section Entitled \"History\", Preserve its Title, and add to it an item stating at least the title, year, new authors, and publisher of the Modified Version as given on the Title Page. If there is no section Entitled \"History\" in the Document, create one stating the title, year, authors, and publisher of the Document as given on its Title Page, then add an item describing the Modified Version as stated in the previous sentence. J. Preserve the network location, if any, given in the Document for public access to a Transparent copy of the Document, and likewise the network locations given in the Document for previous versions it was based on. These may be placed in the \"History\" section. You may omit a network location for a work that was published at least four years before the Document itself, or if the original publisher of the version it refers to gives permission. K. For any section Entitled \"Acknowledgements\" or \"Dedications\", Preserve the Title of the section, and preserve in the section all the substance and tone of each of the contributor acknowledgements and/or dedications given therein. L. Preserve all the Invariant Sections of the Document, unaltered in their text and in their titles. Section numbers or the equivalent are not considered part of the section titles. M. Delete any section Entitled \"Endorsements\". Such a section may not be included in the Modified Version. N. Do not retitle any existing section to be Entitled \"Endorsements\" or to conflict in title with any Invariant Section. O. Preserve any Warranty Disclaimers. If the Modified Version includes new front-matter sections or appendices that qualify as Secondary Sections and contain no material copied from the Document, you may at your option designate some or all of these sections as invariant. To do this, add their titles to the list of Invariant Sections in the Modified Version's license notice. These titles must be distinct from any other section titles. You may add a section Entitled \"Endorsements\", provided it contains nothing but endorsements of your Modified Version by various parties--for example, statements of peer review or that the text has been approved by an organization as the authoritative definition of a standard. You may add a passage of up to five words as a Front-Cover Text, and a passage of up to 25 words as a Back-Cover Text, to the end of the list of Cover Texts in the Modified Version. Only one passage of Front-Cover Text and one of Back-Cover Text may be added by (or through arrangements made by) any one entity. If the Document already includes a cover text for the same cover, previously added by you or by arrangement made by the same entity you are acting on behalf of, you may not add another; but you may replace the old one, on explicit permission from the previous publisher that added the old one. The author(s) and publisher(s) of the Document do not by this License give permission to use their names for publicity for or to assert or imply endorsement of any Modified Version. 5. COMBINING DOCUMENTS You may combine the Document with other documents released under this License, under the terms defined in section 4 above for modified versions, provided that you include in the combination all of the Invariant Sections of all of the original documents, unmodified, and list them all as Invariant Sections of your combined work in its license notice, and that you preserve all their Warranty Disclaimers. The combined work need only contain one copy of this License, and multiple identical Invariant Sections may be replaced with a single copy. If there are multiple Invariant Sections with the same name but different contents, make the title of each such section unique by adding at the end of it, in parentheses, the name of the original author or publisher of that section if known, or else a unique number. Make the same adjustment to the section titles in the list of Invariant Sections in the license notice of the combined work. In the combination, you must combine any sections Entitled \"History\" in the various original documents, forming one section Entitled \"History\"; likewise combine any sections Entitled \"Acknowledgements\", and any sections Entitled \"Dedications\". You must delete all sections Entitled \"Endorsements\". 6. COLLECTIONS OF DOCUMENTS You may make a collection consisting of the Document and other documents released under this License, and replace the individual copies of this License in the various documents with a single copy that is included in the collection, provided that you follow the rules of this License for verbatim copying of each of the documents in all other respects. You may extract a single document from such a collection, and distribute it individually under this License, provided you insert a copy of this License into the extracted document, and follow this License in all other respects regarding verbatim copying of that document. 7. AGGREGATION WITH INDEPENDENT WORKS A compilation of the Document or its derivatives with other separate and independent documents or works, in or on a volume of a storage or distribution medium, is called an \"aggregate\" if the copyright resulting from the compilation is not used to limit the legal rights of the compilation's users beyond what the individual works permit. When the Document is included in an aggregate, this License does not apply to the other works in the aggregate which are not themselves derivative works of the Document. If the Cover Text requirement of section 3 is applicable to these copies of the Document, then if the Document is less than one half of the entire aggregate, the Document's Cover Texts may be placed on covers that bracket the Document within the aggregate, or the electronic equivalent of covers if the Document is in electronic form. Otherwise they must appear on printed covers that bracket the whole aggregate. 8. TRANSLATION Translation is considered a kind of modification, so you may distribute translations of the Document under the terms of section 4. Replacing Invariant Sections with translations requires special permission from their copyright holders, but you may include translations of some or all Invariant Sections in addition to the original versions of these Invariant Sections. You may include a translation of this License, and all the license notices in the Document, and any Warranty Disclaimers, provided that you also include the original English version of this License and the original versions of those notices and disclaimers. In case of a disagreement between the translation and the original version of this License or a notice or disclaimer, the original version will prevail. If a section in the Document is Entitled \"Acknowledgements\", \"Dedications\", or \"History\", the requirement (section 4) to Preserve its Title (section 1) will typically require changing the actual title. 9. TERMINATION You may not copy, modify, sublicense, or distribute the Document except as expressly provided under this License. Any attempt otherwise to copy, modify, sublicense, or distribute it is void, and will automatically terminate your rights under this License. However, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation. Moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice. Termination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this License. If your rights have been terminated and not permanently reinstated, receipt of a copy of some or all of the same material does not give you any rights to use it. 10. FUTURE REVISIONS OF THIS LICENSE The Free Software Foundation may publish new, revised versions of the GNU Free Documentation License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns. See https://www.gnu.org/licenses/. Each version of the License is given a distinguishing version number. If the Document specifies that a particular numbered version of this License \"or any later version\" applies to it, you have the option of following the terms and conditions either of that specified version or of any later version that has been published (not as a draft) by the Free Software Foundation. If the Document does not specify a version number of this License, you may choose any version ever published (not as a draft) by the Free Software Foundation. If the Document specifies that a proxy can decide which future versions of this License can be used, that proxy's public statement of acceptance of a version permanently authorizes you to choose that version for the Document. 11. RELICENSING \"Massive Multiauthor Collaboration Site\" (or \"MMC Site\") means any World Wide Web server that publishes copyrightable works and also provides prominent facilities for anybody to edit those works. A public wiki that anybody can edit is an example of such a server. A \"Massive Multiauthor Collaboration\" (or \"MMC\") contained in the site means any set of copyrightable works thus published on the MMC site. \"CC-BY-SA\" means the Creative Commons Attribution-Share Alike 3.0 license published by Creative Commons Corporation, a not-for-profit corporation with a principal place of business in San Francisco, California, as well as future copyleft versions of that license published by that same organization. \"Incorporate\" means to publish or republish a Document, in whole or in part, as part of another Document. An MMC is \"eligible for relicensing\" if it is licensed under this License, and if all works that were first published under this License somewhere other than this MMC, and subsequently incorporated in whole or in part into the MMC, (1) had no cover texts or invariant sections, and (2) were thus incorporated prior to November 1, 2008. The operator of an MMC Site may republish an MMC contained in the site under CC-BY-SA on the same site at any time before August 1, 2009, provided the MMC is eligible for relicensing. ADDENDUM: How to use this License for your documents To use this License in a document you have written, include a copy of the License in the document and put the following copyright and license notices just after the title page: Copyright (c) YEAR YOUR NAME. Permission is granted to copy, distribute and/or modify this document under the terms of the GNU Free Documentation License, Version 1.3 or any later version published by the Free Software Foundation; with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts. A copy of the license is included in the section entitled \"GNU Free Documentation License\". If you have Invariant Sections, Front-Cover Texts and Back-Cover Texts, replace the \"with...Texts.\" line with this: with the Invariant Sections being LIST THEIR TITLES, with the Front-Cover Texts being LIST, and with the Back-Cover Texts being LIST. If you have Invariant Sections without Cover Texts, or some other combination of the three, merge those two alternatives to suit the situation. If your document contains nontrivial examples of program code, we recommend releasing these examples in parallel under your choice of free software license, such as the GNU General Public License, to permit their use in free software.","title":"License"},{"location":"Docs/Application/Overview/","text":"Warning Documentation is not complete!","title":"Overview"},{"location":"Docs/Application/SiLagoDSP/Fast-Fourier-Projection/","text":"Warning Documentation is not complete!","title":"Fast Fourier Projection"},{"location":"Docs/Fabric/Overview/","text":"Overview Please check the specification of DRRA: DRRA Specification","title":"Overview"},{"location":"Docs/Fabric/Overview/#overview","text":"Please check the specification of DRRA: DRRA Specification","title":"Overview"},{"location":"Docs/Fabric/DRRA/RACCU/","text":"Run-time Address Constraint Computing Unit Function Run-time Address Constraint Computing Unit (RACCU) is used for computing address constraint for Address Generation Unit (AGU). AGU can deal with maximum 2-level affine address function. Affine address function is a function that can be expressed by equation below: \\begin{align} y = ax+b \\end{align} \\begin{align} y = ax+b \\end{align} where a and b are constraints. 2-level affine address function can then be expressed as: \\begin{align} y = c(ax+b)+d \\end{align} \\begin{align} y = c(ax+b)+d \\end{align} where a , b , c and d are constraints. Address constraint can be immediate value or a number generated at run-time according to a given function. The resources which deal with the constraint generation is the RACCU. Specification Info Old RACCU implementation. RACCU is a unit inside Sequencer. It has a register file of default depth N=8 . Contraints and temporary variables will be stored inside this register file. The data register is always exposed to Sequencer to read. Another register file in RACCU is used to manage the loops. The depth depends on maximum nested loop RACCU can handle, by default it's 4 . Each entry in loop management register file has 3 fields: Loop id Loop counter Loop end flag The loop id will be identify the entry location in the loop management register file. Loop counter will be initialized by the first LOOP_HEADER instruction and be changed periodically by LOOP_TAIL instruction. The comparison between the loop conter and loop bound is carried out by LOOP_HEADER instruction. If they are equal, loop end flag will be set to true and exits the loop. RACCU has a computation unit which is similar to a mini-DPU. It has 5 working modes. All of them are binary operations. They are: (0) RACCU_MODE_IDLE (1) RACCU_MODE_LOOP_H (2) RACCU_MODE_LOOP_T (3) RACCU_MODE_ADD (4) RACCU_MODE_SUB (5) RACCU_MODE_SHIFT_L (6) RACCU_MODE_SHIFT_R (7) RACCU_MODE_ADD_WITH_LOOP_INDEX Operands of each mode can be either immediate value from instruction or data from RACCU register whoes address is specified by the instruction. A bit is used to distinguish the operand origin. Info New RACCU implementation. RACCU is a unit inside Sequencer. It has a register file of default depth N=8 . Contraints, temporary variables and loop iterators will be stored inside this register file. The data register is always exposed to Sequencer to read. Loop iterator will be assigned from the beginning of the register file according to the order of loop while RACCU variables will be assigned from the end of register file. Once the loop iterators or the RACCU variables are not needed, they can be freed by moving the stack/heap pointer 1 position back. The assignment of register location is managed by the Vesyla compiler. RACCU has a computation unit which is similar to a mini-DPU. It has 8 working modes. All of them are binary operations. They are: (0) RACCU_MODE_IDLE (1) RACCU_MODE_LOOP_H (2) RACCU_MODE_LOOP_T (3) RACCU_MODE_ADD (4) RACCU_MODE_SUB (5) RACCU_MODE_SHIFT_L (6) RACCU_MODE_SHIFT_R (7) RACCU_MODE_LOG2 Operands of each mode can be either immediate value from instruction or data from RACCU register whoes address is specified by the instruction. A bit is used to distinguish the operand origin. Related Instructions RACCU instruction LOOP_HEADER instruction LOOP_TAIL instruction Info Old RACCU implementation. Signal I/O Type Description clk in std_logic Clock rst in std_logic Reset, active low op1_sd in std_logic Type of operand 1, 0-immediate, 1-reference op1 in std_logic_vector 8bits Operand 1 value / Operand 1 address op2_sd in std_logic Type of operand 2, 0-immediate, 1-reference op2 in std_logic_vector 8bits Operand 2 value / Operand 2 address cfg_mode in std_logic_vector 3bits Mode of RACCU computation unit result_addr in std_logic_vector 3bits Result address in data_reg data_reg out raccu_reg_out_ty Data register output loop_reg out raccu_loop_array_ty Loop register output Info New RACCU implementation. Signal I/O Type Description clk in std_logic Clock rst in std_logic Reset, active low op1_sd in std_logic Type of operand 1, 0-immediate, 1-reference op1 in std_logic_vector 8bits Operand 1 value / Operand 1 address op2_sd in std_logic Type of operand 2, 0-immediate, 1-reference op2 in std_logic_vector 8bits Operand 2 value / Operand 2 address cfg_mode in std_logic_vector 3bits Mode of RACCU computation unit result_addr in std_logic_vector 3bits Result address in data_reg data_reg out raccu_reg_out_ty Data register output","title":"Run-time Address Constraint Computing Unit"},{"location":"Docs/Fabric/DRRA/RACCU/#run-time-address-constraint-computing-unit","text":"","title":"Run-time Address Constraint Computing Unit"},{"location":"Docs/Fabric/DRRA/RACCU/#function","text":"Run-time Address Constraint Computing Unit (RACCU) is used for computing address constraint for Address Generation Unit (AGU). AGU can deal with maximum 2-level affine address function. Affine address function is a function that can be expressed by equation below: \\begin{align} y = ax+b \\end{align} \\begin{align} y = ax+b \\end{align} where a and b are constraints. 2-level affine address function can then be expressed as: \\begin{align} y = c(ax+b)+d \\end{align} \\begin{align} y = c(ax+b)+d \\end{align} where a , b , c and d are constraints. Address constraint can be immediate value or a number generated at run-time according to a given function. The resources which deal with the constraint generation is the RACCU.","title":"Function"},{"location":"Docs/Fabric/DRRA/RACCU/#specification","text":"Info Old RACCU implementation. RACCU is a unit inside Sequencer. It has a register file of default depth N=8 . Contraints and temporary variables will be stored inside this register file. The data register is always exposed to Sequencer to read. Another register file in RACCU is used to manage the loops. The depth depends on maximum nested loop RACCU can handle, by default it's 4 . Each entry in loop management register file has 3 fields: Loop id Loop counter Loop end flag The loop id will be identify the entry location in the loop management register file. Loop counter will be initialized by the first LOOP_HEADER instruction and be changed periodically by LOOP_TAIL instruction. The comparison between the loop conter and loop bound is carried out by LOOP_HEADER instruction. If they are equal, loop end flag will be set to true and exits the loop. RACCU has a computation unit which is similar to a mini-DPU. It has 5 working modes. All of them are binary operations. They are: (0) RACCU_MODE_IDLE (1) RACCU_MODE_LOOP_H (2) RACCU_MODE_LOOP_T (3) RACCU_MODE_ADD (4) RACCU_MODE_SUB (5) RACCU_MODE_SHIFT_L (6) RACCU_MODE_SHIFT_R (7) RACCU_MODE_ADD_WITH_LOOP_INDEX Operands of each mode can be either immediate value from instruction or data from RACCU register whoes address is specified by the instruction. A bit is used to distinguish the operand origin. Info New RACCU implementation. RACCU is a unit inside Sequencer. It has a register file of default depth N=8 . Contraints, temporary variables and loop iterators will be stored inside this register file. The data register is always exposed to Sequencer to read. Loop iterator will be assigned from the beginning of the register file according to the order of loop while RACCU variables will be assigned from the end of register file. Once the loop iterators or the RACCU variables are not needed, they can be freed by moving the stack/heap pointer 1 position back. The assignment of register location is managed by the Vesyla compiler. RACCU has a computation unit which is similar to a mini-DPU. It has 8 working modes. All of them are binary operations. They are: (0) RACCU_MODE_IDLE (1) RACCU_MODE_LOOP_H (2) RACCU_MODE_LOOP_T (3) RACCU_MODE_ADD (4) RACCU_MODE_SUB (5) RACCU_MODE_SHIFT_L (6) RACCU_MODE_SHIFT_R (7) RACCU_MODE_LOG2 Operands of each mode can be either immediate value from instruction or data from RACCU register whoes address is specified by the instruction. A bit is used to distinguish the operand origin.","title":"Specification"},{"location":"Docs/Fabric/DRRA/RACCU/#related-instructions","text":"","title":"Related Instructions"},{"location":"Docs/Fabric/DRRA/RACCU/#raccu-instruction","text":"","title":"RACCU instruction"},{"location":"Docs/Fabric/DRRA/RACCU/#loop_header-instruction","text":"","title":"LOOP_HEADER instruction"},{"location":"Docs/Fabric/DRRA/RACCU/#loop_tail-instruction","text":"Info Old RACCU implementation. Signal I/O Type Description clk in std_logic Clock rst in std_logic Reset, active low op1_sd in std_logic Type of operand 1, 0-immediate, 1-reference op1 in std_logic_vector 8bits Operand 1 value / Operand 1 address op2_sd in std_logic Type of operand 2, 0-immediate, 1-reference op2 in std_logic_vector 8bits Operand 2 value / Operand 2 address cfg_mode in std_logic_vector 3bits Mode of RACCU computation unit result_addr in std_logic_vector 3bits Result address in data_reg data_reg out raccu_reg_out_ty Data register output loop_reg out raccu_loop_array_ty Loop register output Info New RACCU implementation. Signal I/O Type Description clk in std_logic Clock rst in std_logic Reset, active low op1_sd in std_logic Type of operand 1, 0-immediate, 1-reference op1 in std_logic_vector 8bits Operand 1 value / Operand 1 address op2_sd in std_logic Type of operand 2, 0-immediate, 1-reference op2 in std_logic_vector 8bits Operand 2 value / Operand 2 address cfg_mode in std_logic_vector 3bits Mode of RACCU computation unit result_addr in std_logic_vector 3bits Result address in data_reg data_reg out raccu_reg_out_ty Data register output","title":"LOOP_TAIL instruction"},{"location":"Docs/Fabric/RISCV/Overview/","text":"Warning Documentation is not complete!","title":"Overview"},{"location":"Docs/Library/Overview/","text":"Warning Documentation is not complete!","title":"Overview"},{"location":"Docs/Library/BLAS/Overview/","text":"Warning Documentation is not complete!","title":"Overview"},{"location":"Docs/Library/FFT/Overview/","text":"Warning Documentation is not complete!","title":"Overview"},{"location":"Docs/Library/Interleaver/Overview/","text":"Warning Documentation is not complete!","title":"Overview"},{"location":"Docs/Library/NN/Overview/","text":"Warning Documentation is not complete!","title":"Overview"},{"location":"Docs/Start/Overview/","text":"Getting start Source code Find the source code Source code organization Read and contribute to the source code Quick guide for code documentation Quick guide for naming system","title":"Getting start"},{"location":"Docs/Start/Overview/#getting-start","text":"","title":"Getting start"},{"location":"Docs/Start/Overview/#source-code","text":"","title":"Source code"},{"location":"Docs/Start/Overview/#find-the-source-code","text":"Source code organization","title":"Find the source code"},{"location":"Docs/Start/Overview/#read-and-contribute-to-the-source-code","text":"Quick guide for code documentation Quick guide for naming system","title":"Read and contribute to the source code"},{"location":"Docs/Start/Quick-guide-for-code-documentation/","text":"Warning Documentation is not complete! Quick guide for code documentation SiLago project try to use doxygen to generate reference manual for its source code. The comment is crutial for the quality of generated documentation. Therefore, we make some guidelines for commenting the source code. C++ Comment environment Use QT's commenting style to form a doxygen readable comment block. As shown in the example below. 1 2 3 /*! * This is a block comment */ Single line comment is also allowed and should using style like this: 1 //! This is a single line comment Comment a file Every header file should be documented with a short description about the role of this file. Additional information like author, license, modification history, etc should also be included inside the comment block. Example: 1 2 3 4 5 6 7 8 9 10 11 12 /*! * \\file Global.hpp * * Defines all the global variables. * * Author: author <author@domain.com> * Licese: MIT * Modification: * 2017-01-03 author created * 2017-02-05 user1 add feature of xxx * 2017-02-07 user2 fix bug xxx */ Comment a class Every class should be documented right before its defination. Description of the function of the class is very important. Example: 1 2 3 4 5 6 /*! * Description of class A */ class A : public B { .... }; Comment a method/function Method function should be documented right before its declaration. The description, parameters, return type should be included inside the comment block. Example: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 class A : public B { public : /*! * Constructor */ A (); /*! * Some other function * * \\param p0 some input * \\param p1 the second input * \\return the calculate result */ int func ( int p0 , int p1 ); };","title":"Quick guide for code documentation"},{"location":"Docs/Start/Quick-guide-for-code-documentation/#quick-guide-for-code-documentation","text":"SiLago project try to use doxygen to generate reference manual for its source code. The comment is crutial for the quality of generated documentation. Therefore, we make some guidelines for commenting the source code.","title":"Quick guide for code documentation"},{"location":"Docs/Start/Quick-guide-for-code-documentation/#c","text":"","title":"C++"},{"location":"Docs/Start/Quick-guide-for-code-documentation/#comment-environment","text":"Use QT's commenting style to form a doxygen readable comment block. As shown in the example below. 1 2 3 /*! * This is a block comment */ Single line comment is also allowed and should using style like this: 1 //! This is a single line comment","title":"Comment environment"},{"location":"Docs/Start/Quick-guide-for-code-documentation/#comment-a-file","text":"Every header file should be documented with a short description about the role of this file. Additional information like author, license, modification history, etc should also be included inside the comment block. Example: 1 2 3 4 5 6 7 8 9 10 11 12 /*! * \\file Global.hpp * * Defines all the global variables. * * Author: author <author@domain.com> * Licese: MIT * Modification: * 2017-01-03 author created * 2017-02-05 user1 add feature of xxx * 2017-02-07 user2 fix bug xxx */","title":"Comment a file"},{"location":"Docs/Start/Quick-guide-for-code-documentation/#comment-a-class","text":"Every class should be documented right before its defination. Description of the function of the class is very important. Example: 1 2 3 4 5 6 /*! * Description of class A */ class A : public B { .... };","title":"Comment a class"},{"location":"Docs/Start/Quick-guide-for-code-documentation/#comment-a-methodfunction","text":"Method function should be documented right before its declaration. The description, parameters, return type should be included inside the comment block. Example: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 class A : public B { public : /*! * Constructor */ A (); /*! * Some other function * * \\param p0 some input * \\param p1 the second input * \\return the calculate result */ int func ( int p0 , int p1 ); };","title":"Comment a method/function"},{"location":"Docs/Start/Quick-guide-for-naming-system/","text":"Warning Documentation is not complete!","title":"Quick guide for naming system"},{"location":"Docs/Start/Source-code-organization/","text":"Warning Documentation is not complete!","title":"Source code organization"},{"location":"Docs/ToolChain/Overview/","text":"Warning Documentation is not complete!","title":"Overview"},{"location":"Docs/ToolChain/Sylva/Overview/","text":"Sylva New version of Sylva documentation: Sylva documentation","title":"Sylva"},{"location":"Docs/ToolChain/Sylva/Overview/#sylva","text":"New version of Sylva documentation: Sylva documentation","title":"Sylva"},{"location":"Docs/ToolChain/Vesyla/Cidfg/","text":"Warning Documentation is not complete! CIDFG - Control Index Data-Flow Graph Vertices Indexing Vertex An indexing vertex is a vertex that recieves address constraints (scalar tokens) as inputs and generates address sequence (vector token) as outputs. Indexing vertex has an address generation function which takes address constraints as input and generate address sequence. A tipical address generation function are affine function y = ax + b y = ax + b in which a a and b b are address constraints, x x is an implied sequence [0, 1, 2, ..., N] ( N N is also an address constraint) and y y is the generated output sequence. Address constraint can be either a constant number or a scalar variable. If all the address constraint inputs of an indexing vertex are constant numbers, the indexing vertex is static ; if any of its inputs are variable and origin of those variable are linked to either constants or static loop iterators, the indexing vertex is then parametrically static because it can be speculated at compile time; If the variables are somehow linked to any run-time calculated variable, the indexing vertex will become dynamic whoes outputs cannot be determined at compile time.","title":"Cidfg"},{"location":"Docs/ToolChain/Vesyla/Cidfg/#cidfg-control-index-data-flow-graph","text":"","title":"CIDFG - Control Index Data-Flow Graph"},{"location":"Docs/ToolChain/Vesyla/Cidfg/#vertices","text":"","title":"Vertices"},{"location":"Docs/ToolChain/Vesyla/Cidfg/#indexing-vertex","text":"An indexing vertex is a vertex that recieves address constraints (scalar tokens) as inputs and generates address sequence (vector token) as outputs. Indexing vertex has an address generation function which takes address constraints as input and generate address sequence. A tipical address generation function are affine function y = ax + b y = ax + b in which a a and b b are address constraints, x x is an implied sequence [0, 1, 2, ..., N] ( N N is also an address constraint) and y y is the generated output sequence. Address constraint can be either a constant number or a scalar variable. If all the address constraint inputs of an indexing vertex are constant numbers, the indexing vertex is static ; if any of its inputs are variable and origin of those variable are linked to either constants or static loop iterators, the indexing vertex is then parametrically static because it can be speculated at compile time; If the variables are somehow linked to any run-time calculated variable, the indexing vertex will become dynamic whoes outputs cannot be determined at compile time.","title":"Indexing Vertex"},{"location":"Docs/ToolChain/Vesyla/DiMArch/","text":"DiMArch Reading and Writing To read from DiMArch cell or write to DiMArch cell, we need several collaborating instructions. They are ROUTE instruction, REFI instruction and SRAM_R / SRAM_W instruction. Read (DiMArch -> Register file) When reading from DiMArch to Register file, a path should be routed first by ROUTE instruction. ROUTE instruction has 2 critical timestamps: issue and end . ROUTE instruction will occupy the DiMArch NoC resource of all cells on the routed path until it's end timestamp reached. During the time when the DiMArch NoC path is guaranteed by ROUTE instruction, a SRAM_R instruction is applied to configure the AGU on DiMArch side. SRAM_R instruction has 4 critical timestamps: issue , arrive , active and end . Issue time represents the cycle when sequencer issue the instruction, arrive time represents the instruction reaches the destination DiMArch cell, active time represents the time point when the instruction starts outputing readed data, and end time indicates the instruction stops reading data. At the same time, a REFI instruction should be activated in order to store the data from DiMArch to register file entries. REFI instruction has 3 critical timestamps: issue , active and end . The timing relationship of those 3 instructions are shown in figure below: Write (Register file -> DiMArch) Writing data from Register file to DiMArch share the same set of instruction with the same timestamps as reading operation. The only difference comes from the dependency arrows. The timing relationship of those 3 instructions are shown in figure below:","title":"DiMArch Reading and Writing"},{"location":"Docs/ToolChain/Vesyla/DiMArch/#dimarch-reading-and-writing","text":"To read from DiMArch cell or write to DiMArch cell, we need several collaborating instructions. They are ROUTE instruction, REFI instruction and SRAM_R / SRAM_W instruction.","title":"DiMArch Reading and Writing"},{"location":"Docs/ToolChain/Vesyla/DiMArch/#read-dimarch-register-file","text":"When reading from DiMArch to Register file, a path should be routed first by ROUTE instruction. ROUTE instruction has 2 critical timestamps: issue and end . ROUTE instruction will occupy the DiMArch NoC resource of all cells on the routed path until it's end timestamp reached. During the time when the DiMArch NoC path is guaranteed by ROUTE instruction, a SRAM_R instruction is applied to configure the AGU on DiMArch side. SRAM_R instruction has 4 critical timestamps: issue , arrive , active and end . Issue time represents the cycle when sequencer issue the instruction, arrive time represents the instruction reaches the destination DiMArch cell, active time represents the time point when the instruction starts outputing readed data, and end time indicates the instruction stops reading data. At the same time, a REFI instruction should be activated in order to store the data from DiMArch to register file entries. REFI instruction has 3 critical timestamps: issue , active and end . The timing relationship of those 3 instructions are shown in figure below:","title":"Read (DiMArch -&gt; Register file)"},{"location":"Docs/ToolChain/Vesyla/DiMArch/#write-register-file-dimarch","text":"Writing data from Register file to DiMArch share the same set of instruction with the same timestamps as reading operation. The only difference comes from the dependency arrows. The timing relationship of those 3 instructions are shown in figure below:","title":"Write (Register file -&gt; DiMArch)"},{"location":"Docs/ToolChain/Vesyla/Instruction-Set/","text":"Warning Documentation is not complete! Instruction Set Instructions 0001 - REFI1 1 2 3 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 09 08 07 06 05 04 03 02 01 00 | | | | | | | | | | | | | | | | | | | | | | | | | | | 0 0 0 1 A A B B C D D D D D D E F F F F F F G H H H H Field Position Width Range/Value Description instr_code [26, 23] 4 b'0001 REFI1 instruction code reg_file_port [22, 21] 2 [0, 3] Selects one of the RFile ports subseq_instrs [20, 19] 2 [0, 3] The instruction decoder fetches the consequent (REFI1) or (REFI1 and REFI2) instructions. start_addrs_sd 18 1 [0, 1] The start_addrs is valid only if the start_addrs_sd is 0. Otherwise the start_address would be taken from the RACCU register start_addrs [17, 12] 6 [0, 63] Configures the starting address for the AGU no_of_addrs_sd 11 1 [0, 1] The no_of_addrs is valid only when no_of_addrs_sd is 0, otherwise the no_of_addrs would be taken from the RACCU register. no_of_addrs [10, 5] 6 [0, 63] Configures the number of address for the AGU initial_delay_sd: 4 1 [0, 1] The init_delay is valid only when init_delay_sd is set. initial_delay [3, 0] 4 [0, 15] Configures the initial delay 0010 - REFI2 1 2 3 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 09 08 07 06 05 04 03 02 01 00 | | | | | | | | | | | | | | | | | | | | | | | | | | | 0 0 1 0 A B B B B B B C D E E E E F G G G G G H H H H Field Position Width Range/Value Description instr_code [26, 23] 4 b'0010 REFI2 instruction code step_val_sd 22 1 [0, 1] The step_val is valid only if step_val_sd is set. step_val [21, 16] 6 [0, 63] Step incremental/decremental value of the address step_val_sign 15 1 [0, 1] If it's 0, address will be incremented by the step_val else decremented by the step_val refi_middle_delay_sd 14 1 [0, 63] The refi_middle_delay is valid only if refi_middle_delay_sd is 0 refi_middle_delay [13, 10] 4 [0, 15] Configures the middle dealy no_of_reps_sd 9 1 [0, 1] The no_of_reps is valid only when the no_of_reps_sd is 0, otherwise the no_of_reps value would be taken from the RACCU register no_of_reps [8, 4] 5 [0, 31] Configures the number of times the address pattern to repeat rpt_step_value [3, 0] 4 [0, 15] The step increment/decrement value 0011 - REFI3 0100 - DPU 1 2 3 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 09 08 07 06 05 04 03 02 01 00 | | | | | | | | | | | | | | | | | | | | | | | | | | | 0 1 0 0 A A A A A B B C C D D E F G G G G G G G G H H Field Position Width Range/Value Description instr_code [26, 23] 4 b'0100 DPU instruction code dpu_mode [22, 18] 5 [0, 12] Configures the valid dpu mode dpu_saturation [17, 16] 2 [0, 3] Selects the integer or fixed point operation with or without saturation 1 dpu_output_a [15, 14] 2 [0, 3] Selects one or both the outports 2 dpu_output_b [13, 12] 2 [0, 3] Selects one or both the outports 2 dpu_acc_clear_rst 11 1 [0, 1] Asynchronous reset, when set, clears the DPU accumulator register. dpu_acc_clear_sd 10 1 [0, 1] The dpu_acc_clear is valid only when dpu acc_clear_sd is set. dpu_acc_clear [9, 2] 8 [0, 255] The DPU accumulator register is cleared when the accumulator counter reaches the value configured in the dpu_acc_clear dpu_process_inout [1, 0] 2 [0, 3] Processes the input or output 3 0101 SWB Warning SWB is not a direct mapping instruction. It need to be re-interpret by RTL fabric. Field Position Width Range/Value Description instr_code [26, 23] 4 b'0110 SWB instruction code source_row N/A N/A N/A The source DRRA row source_col [16, 0] 17 N/A The source DRRA column 0110 JUMP 1 2 3 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 09 08 07 06 05 04 03 02 01 00 | | | | | | | | | | | | | | | | | | | | | | | | | | | 0 1 1 0 A A A A A A - - - - - - - - - - - - - - - - - Field Position Width Range/Value Description instr_code [26, 23] 4 b'0110 JUMP instruction code true_addrs [22, 17] 6 4 [0, 63] The target address N/A [16, 0] 17 N/A N/A 0111 DELAY 1 2 3 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 09 08 07 06 05 04 03 02 01 00 | | | | | | | | | | | | | | | | | | | | | | | | | | | 0 1 1 1 A B B B B B B B B B B B B B B B - - - - - - - Field Position Width Range/Value Description instr_code [26, 23] 4 b'0111 DELAY instruction code del_cycles_sd 22 1 [0, 1] The del_cycles is valid only if del_cycles_sd is set del_cycles [21, 7] 15 [0, 32767] Number of clock cycles to wait before decoding the next instruction N/A [6, 0] 7 N/A N/A 1000 FOR_HEADER 1001 FOR_TAIL 1010 RACCU 1011 BRANCH 1 2 3 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 09 08 07 06 05 04 03 02 01 00 | | | | | | | | | | | | | | | | | | | | | | | | | | | 0 1 1 1 A A B B B B B B - - - - - - - - - - - - - - - Field Position Width Range/Value Description instr_code [26, 23] 4 b'1011 BRANCH instruction code brnch_mode [22, 21] 2 [0, 4] The conditional branch jumps to the false address when the (brnch_mode && seq_cond_status) == \"00\" brnch_false_addr [20, 15] 6 4 [0, 63] Configures the false address N/A [14, 0] 15 N/A N/A 1100 ROUTE 1101 SRAM_READ 1110 SRAM_WRITE 1111 HALT 5 1 2 3 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 09 08 07 06 05 04 03 02 01 00 | | | | | | | | | | | | | | | | | | | | | | | | | | | 1 1 1 1 - - - - - - - - - - - - - - - - - - - - - - - Field Position Width Range/Value Description instr_code [26, 23] 4 b'1111 HALT instruction code N/A [22, 0] 23 N/A N/A Example Matlab code 1 2 3 4 5 A = [ 3 : 12 ]; %! RFILE<> [0,0] B = [ 5 : 14 ]; %! RFILE<> [0,0] C = [ 0 ]; %! RFILE<> [0,0] C ( 1 ) = A ( 1 ) + B ( 1 ); %! DPU [0,0] Psudo assembly code (from Vesyla) 1 2 3 4 5 6 7 0 (1 ): SWB , StNo: 3 , Sch:(min: 0 , max: 6 ), 'A_in1_3_00' , S:(REFI<0,0>, PtNo: 3), D:(DPU <0,0>, PtNo: 2) 1 (2 ): SWB , StNo: 3 , Sch:(min: 1 , max: 6 ), 'B_in2_3_00' , S:(REFI<0,0>, PtNo: 2), D:(DPU <0,0>, PtNo: 3) 2 (3 ): SWB , StNo: 3 , Sch:(min: 2 , max: 7 ), 'C_out_3_00' , S:(DPU <0,0>, PtNo: 0), D:(REFI<0,0>, PtNo: 1) 3 (4 ): REFI , StNo: 3 , Sch:(min: 6 , max: 6 ), 'A_in1_3_00' , PortMode: 'in', AddressMode: 'Linear', PortNo: 3, IDelay: 2(S), MDelay: 0(S), RDelay: 0(S), StartAddress: 0(S), StepValue: 0(S), NoOfAddress: 0(S), NoOfRepetition: 0(S), RepOffset: 0 4 (5 ): REFI , StNo: 3 , Sch:(min: 6 , max: 6 ), 'B_in2_3_00' , PortMode: 'in', AddressMode: 'Linear', PortNo: 2, IDelay: 1(S), MDelay: 0(S), RDelay: 0(S), StartAddress: 10(S), StepValue: 0(S), NoOfAddress: 0(S), NoOfRepetition: 0(S), RepOffset: 0 5 (6 ): DPU , StNo: 3 , Sch:(min: 6 , max: 6 ), Mode: 'ADD', ModeValue: 10, ExecutionCycle: 0, Repetition: 0 6 (7 ): REFI , StNo: 3 , Sch:(min: 7 , max: 7 ), 'C_out_3_00' , PortMode: 'out', AddressMode: 'Linear', PortNo: 1, IDelay: 0(S), MDelay: 0(S), RDelay: 0(S), StartAddress: 20(S), StepValue: 0(S), NoOfAddress: 0(S), NoOfRepetition: 0(S), RepOffset: 0 Assembly code (translated) 1 2 3 4 5 6 7 SWB , StNo: 3 , Sch:(min: 0 , max: 6 ), 'A_in1_3_00' , S:(REFI<0,0>, PtNo: 3), D:(DPU <0,0>, PtNo: 2) SWB , StNo: 3 , Sch:(min: 1 , max: 6 ), 'B_in2_3_00' , S:(REFI<0,0>, PtNo: 2), D:(DPU <0,0>, PtNo: 3) SWB , StNo: 3 , Sch:(min: 2 , max: 7 ), 'C_out_3_00' , S:(DPU <0,0>, PtNo: 0), D:(REFI<0,0>, PtNo: 1) REFI1 3, 0, 0, 0, 0, 0, 0, 2 REFI1 2, 0, 0, 10, 0, 0, 0, 1 DPU 10, 0, 0, 0, 0, 0, 0, 0, 0 REFI1 1, 0, 0, 20, 0, 0, 0, 0 Machine code 1 2 3 4 5 6 7 8 9 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 09 08 07 06 05 04 03 02 01 00 | | | | | | | | | | | | | | | | | | | | | | | | | | | SWB 0 1 0 1 SWB 0 1 0 1 SWB 0 1 0 1 REFI1 0 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 REFI1 0 0 0 1 1 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 1 DPU 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 REFI1 0 0 0 1 0 1 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 Saturation : [0]: Integer operation without saturation; [1]: Fixed point without saturation; [2]: Integer operation with saturation; [3]: Fixed point with saturation; \u21a9 Output ports : [0]: Disables both out ports; [1]: Out port 0 will be enabled; [2]: Out port 1 will be enabled; [3]: Both Out port 0 and 1 will be enabled; \u21a9 \u21a9 Process ports : [0]: No preprocessing; [1]: Negates input 0; [2]: Negates input 1; [3]: Absolute of (in0-in1); \u21a9 This number equals to PC size, which is log_2(DEPTH_{instr}) log_2(DEPTH_{instr}) . By default, DEPTH_{instr} = 64 DEPTH_{instr} = 64 . \u21a9 \u21a9 This instruction is not used. \u21a9","title":"Instruction Set"},{"location":"Docs/ToolChain/Vesyla/Instruction-Set/#instruction-set","text":"","title":"Instruction Set"},{"location":"Docs/ToolChain/Vesyla/Instruction-Set/#instructions","text":"","title":"Instructions"},{"location":"Docs/ToolChain/Vesyla/Instruction-Set/#0001-refi1","text":"1 2 3 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 09 08 07 06 05 04 03 02 01 00 | | | | | | | | | | | | | | | | | | | | | | | | | | | 0 0 0 1 A A B B C D D D D D D E F F F F F F G H H H H Field Position Width Range/Value Description instr_code [26, 23] 4 b'0001 REFI1 instruction code reg_file_port [22, 21] 2 [0, 3] Selects one of the RFile ports subseq_instrs [20, 19] 2 [0, 3] The instruction decoder fetches the consequent (REFI1) or (REFI1 and REFI2) instructions. start_addrs_sd 18 1 [0, 1] The start_addrs is valid only if the start_addrs_sd is 0. Otherwise the start_address would be taken from the RACCU register start_addrs [17, 12] 6 [0, 63] Configures the starting address for the AGU no_of_addrs_sd 11 1 [0, 1] The no_of_addrs is valid only when no_of_addrs_sd is 0, otherwise the no_of_addrs would be taken from the RACCU register. no_of_addrs [10, 5] 6 [0, 63] Configures the number of address for the AGU initial_delay_sd: 4 1 [0, 1] The init_delay is valid only when init_delay_sd is set. initial_delay [3, 0] 4 [0, 15] Configures the initial delay","title":"0001 - REFI1"},{"location":"Docs/ToolChain/Vesyla/Instruction-Set/#0010-refi2","text":"1 2 3 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 09 08 07 06 05 04 03 02 01 00 | | | | | | | | | | | | | | | | | | | | | | | | | | | 0 0 1 0 A B B B B B B C D E E E E F G G G G G H H H H Field Position Width Range/Value Description instr_code [26, 23] 4 b'0010 REFI2 instruction code step_val_sd 22 1 [0, 1] The step_val is valid only if step_val_sd is set. step_val [21, 16] 6 [0, 63] Step incremental/decremental value of the address step_val_sign 15 1 [0, 1] If it's 0, address will be incremented by the step_val else decremented by the step_val refi_middle_delay_sd 14 1 [0, 63] The refi_middle_delay is valid only if refi_middle_delay_sd is 0 refi_middle_delay [13, 10] 4 [0, 15] Configures the middle dealy no_of_reps_sd 9 1 [0, 1] The no_of_reps is valid only when the no_of_reps_sd is 0, otherwise the no_of_reps value would be taken from the RACCU register no_of_reps [8, 4] 5 [0, 31] Configures the number of times the address pattern to repeat rpt_step_value [3, 0] 4 [0, 15] The step increment/decrement value","title":"0010 - REFI2"},{"location":"Docs/ToolChain/Vesyla/Instruction-Set/#0011-refi3","text":"","title":"0011 - REFI3"},{"location":"Docs/ToolChain/Vesyla/Instruction-Set/#0100-dpu","text":"1 2 3 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 09 08 07 06 05 04 03 02 01 00 | | | | | | | | | | | | | | | | | | | | | | | | | | | 0 1 0 0 A A A A A B B C C D D E F G G G G G G G G H H Field Position Width Range/Value Description instr_code [26, 23] 4 b'0100 DPU instruction code dpu_mode [22, 18] 5 [0, 12] Configures the valid dpu mode dpu_saturation [17, 16] 2 [0, 3] Selects the integer or fixed point operation with or without saturation 1 dpu_output_a [15, 14] 2 [0, 3] Selects one or both the outports 2 dpu_output_b [13, 12] 2 [0, 3] Selects one or both the outports 2 dpu_acc_clear_rst 11 1 [0, 1] Asynchronous reset, when set, clears the DPU accumulator register. dpu_acc_clear_sd 10 1 [0, 1] The dpu_acc_clear is valid only when dpu acc_clear_sd is set. dpu_acc_clear [9, 2] 8 [0, 255] The DPU accumulator register is cleared when the accumulator counter reaches the value configured in the dpu_acc_clear dpu_process_inout [1, 0] 2 [0, 3] Processes the input or output 3","title":"0100 - DPU"},{"location":"Docs/ToolChain/Vesyla/Instruction-Set/#0101-swb","text":"Warning SWB is not a direct mapping instruction. It need to be re-interpret by RTL fabric. Field Position Width Range/Value Description instr_code [26, 23] 4 b'0110 SWB instruction code source_row N/A N/A N/A The source DRRA row source_col [16, 0] 17 N/A The source DRRA column","title":"0101 SWB"},{"location":"Docs/ToolChain/Vesyla/Instruction-Set/#0110-jump","text":"1 2 3 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 09 08 07 06 05 04 03 02 01 00 | | | | | | | | | | | | | | | | | | | | | | | | | | | 0 1 1 0 A A A A A A - - - - - - - - - - - - - - - - - Field Position Width Range/Value Description instr_code [26, 23] 4 b'0110 JUMP instruction code true_addrs [22, 17] 6 4 [0, 63] The target address N/A [16, 0] 17 N/A N/A","title":"0110 JUMP"},{"location":"Docs/ToolChain/Vesyla/Instruction-Set/#0111-delay","text":"1 2 3 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 09 08 07 06 05 04 03 02 01 00 | | | | | | | | | | | | | | | | | | | | | | | | | | | 0 1 1 1 A B B B B B B B B B B B B B B B - - - - - - - Field Position Width Range/Value Description instr_code [26, 23] 4 b'0111 DELAY instruction code del_cycles_sd 22 1 [0, 1] The del_cycles is valid only if del_cycles_sd is set del_cycles [21, 7] 15 [0, 32767] Number of clock cycles to wait before decoding the next instruction N/A [6, 0] 7 N/A N/A","title":"0111 DELAY"},{"location":"Docs/ToolChain/Vesyla/Instruction-Set/#1000-for_header","text":"","title":"1000 FOR_HEADER"},{"location":"Docs/ToolChain/Vesyla/Instruction-Set/#1001-for_tail","text":"","title":"1001 FOR_TAIL"},{"location":"Docs/ToolChain/Vesyla/Instruction-Set/#1010-raccu","text":"","title":"1010 RACCU"},{"location":"Docs/ToolChain/Vesyla/Instruction-Set/#1011-branch","text":"1 2 3 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 09 08 07 06 05 04 03 02 01 00 | | | | | | | | | | | | | | | | | | | | | | | | | | | 0 1 1 1 A A B B B B B B - - - - - - - - - - - - - - - Field Position Width Range/Value Description instr_code [26, 23] 4 b'1011 BRANCH instruction code brnch_mode [22, 21] 2 [0, 4] The conditional branch jumps to the false address when the (brnch_mode && seq_cond_status) == \"00\" brnch_false_addr [20, 15] 6 4 [0, 63] Configures the false address N/A [14, 0] 15 N/A N/A","title":"1011 BRANCH"},{"location":"Docs/ToolChain/Vesyla/Instruction-Set/#1100-route","text":"","title":"1100 ROUTE"},{"location":"Docs/ToolChain/Vesyla/Instruction-Set/#1101-sram_read","text":"","title":"1101 SRAM_READ"},{"location":"Docs/ToolChain/Vesyla/Instruction-Set/#1110-sram_write","text":"","title":"1110 SRAM_WRITE"},{"location":"Docs/ToolChain/Vesyla/Instruction-Set/#1111-halt5","text":"1 2 3 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 09 08 07 06 05 04 03 02 01 00 | | | | | | | | | | | | | | | | | | | | | | | | | | | 1 1 1 1 - - - - - - - - - - - - - - - - - - - - - - - Field Position Width Range/Value Description instr_code [26, 23] 4 b'1111 HALT instruction code N/A [22, 0] 23 N/A N/A","title":"1111 HALT5"},{"location":"Docs/ToolChain/Vesyla/Instruction-Set/#example","text":"","title":"Example"},{"location":"Docs/ToolChain/Vesyla/Instruction-Set/#matlab-code","text":"1 2 3 4 5 A = [ 3 : 12 ]; %! RFILE<> [0,0] B = [ 5 : 14 ]; %! RFILE<> [0,0] C = [ 0 ]; %! RFILE<> [0,0] C ( 1 ) = A ( 1 ) + B ( 1 ); %! DPU [0,0]","title":"Matlab code"},{"location":"Docs/ToolChain/Vesyla/Instruction-Set/#psudo-assembly-code-from-vesyla","text":"1 2 3 4 5 6 7 0 (1 ): SWB , StNo: 3 , Sch:(min: 0 , max: 6 ), 'A_in1_3_00' , S:(REFI<0,0>, PtNo: 3), D:(DPU <0,0>, PtNo: 2) 1 (2 ): SWB , StNo: 3 , Sch:(min: 1 , max: 6 ), 'B_in2_3_00' , S:(REFI<0,0>, PtNo: 2), D:(DPU <0,0>, PtNo: 3) 2 (3 ): SWB , StNo: 3 , Sch:(min: 2 , max: 7 ), 'C_out_3_00' , S:(DPU <0,0>, PtNo: 0), D:(REFI<0,0>, PtNo: 1) 3 (4 ): REFI , StNo: 3 , Sch:(min: 6 , max: 6 ), 'A_in1_3_00' , PortMode: 'in', AddressMode: 'Linear', PortNo: 3, IDelay: 2(S), MDelay: 0(S), RDelay: 0(S), StartAddress: 0(S), StepValue: 0(S), NoOfAddress: 0(S), NoOfRepetition: 0(S), RepOffset: 0 4 (5 ): REFI , StNo: 3 , Sch:(min: 6 , max: 6 ), 'B_in2_3_00' , PortMode: 'in', AddressMode: 'Linear', PortNo: 2, IDelay: 1(S), MDelay: 0(S), RDelay: 0(S), StartAddress: 10(S), StepValue: 0(S), NoOfAddress: 0(S), NoOfRepetition: 0(S), RepOffset: 0 5 (6 ): DPU , StNo: 3 , Sch:(min: 6 , max: 6 ), Mode: 'ADD', ModeValue: 10, ExecutionCycle: 0, Repetition: 0 6 (7 ): REFI , StNo: 3 , Sch:(min: 7 , max: 7 ), 'C_out_3_00' , PortMode: 'out', AddressMode: 'Linear', PortNo: 1, IDelay: 0(S), MDelay: 0(S), RDelay: 0(S), StartAddress: 20(S), StepValue: 0(S), NoOfAddress: 0(S), NoOfRepetition: 0(S), RepOffset: 0","title":"Psudo assembly code (from Vesyla)"},{"location":"Docs/ToolChain/Vesyla/Instruction-Set/#assembly-code-translated","text":"1 2 3 4 5 6 7 SWB , StNo: 3 , Sch:(min: 0 , max: 6 ), 'A_in1_3_00' , S:(REFI<0,0>, PtNo: 3), D:(DPU <0,0>, PtNo: 2) SWB , StNo: 3 , Sch:(min: 1 , max: 6 ), 'B_in2_3_00' , S:(REFI<0,0>, PtNo: 2), D:(DPU <0,0>, PtNo: 3) SWB , StNo: 3 , Sch:(min: 2 , max: 7 ), 'C_out_3_00' , S:(DPU <0,0>, PtNo: 0), D:(REFI<0,0>, PtNo: 1) REFI1 3, 0, 0, 0, 0, 0, 0, 2 REFI1 2, 0, 0, 10, 0, 0, 0, 1 DPU 10, 0, 0, 0, 0, 0, 0, 0, 0 REFI1 1, 0, 0, 20, 0, 0, 0, 0","title":"Assembly code (translated)"},{"location":"Docs/ToolChain/Vesyla/Instruction-Set/#machine-code","text":"1 2 3 4 5 6 7 8 9 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 09 08 07 06 05 04 03 02 01 00 | | | | | | | | | | | | | | | | | | | | | | | | | | | SWB 0 1 0 1 SWB 0 1 0 1 SWB 0 1 0 1 REFI1 0 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 REFI1 0 0 0 1 1 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 1 DPU 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 REFI1 0 0 0 1 0 1 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 Saturation : [0]: Integer operation without saturation; [1]: Fixed point without saturation; [2]: Integer operation with saturation; [3]: Fixed point with saturation; \u21a9 Output ports : [0]: Disables both out ports; [1]: Out port 0 will be enabled; [2]: Out port 1 will be enabled; [3]: Both Out port 0 and 1 will be enabled; \u21a9 \u21a9 Process ports : [0]: No preprocessing; [1]: Negates input 0; [2]: Negates input 1; [3]: Absolute of (in0-in1); \u21a9 This number equals to PC size, which is log_2(DEPTH_{instr}) log_2(DEPTH_{instr}) . By default, DEPTH_{instr} = 64 DEPTH_{instr} = 64 . \u21a9 \u21a9 This instruction is not used. \u21a9","title":"Machine code"},{"location":"Docs/ToolChain/Vesyla/Overview/","text":"Warning Documentation is not complete!","title":"Overview"},{"location":"Docs/ToolChain/Vesyla/ProgrammingGuide/","text":"Programming Guide Basics General Guide Vesyla accept modified matlab code as input language. You shouldn't write the matlab code like a programming language. You should instead use it as a tool to model the behaviour of the hardware. Vesyla supports small portion of matlab grammar. There are some generic rules expressing the programming style vesyla accepts. General function call is not allowed unless the function is predefined as primitive function. Variable except for constant variable and loop iterator should always be decleared via pragma. Statement should always ends with semicolon ( ; ) to avoid unexpected outputs while simulating in matlab. Pragma Pragma is the notation that guides Vesyla during synthesis process. Vesyla recongnize pragma starting with symbols %! . The main function of pragmas is specify allocation and binding information since Vesyla can't perform automatic allocation and binding. Section Variable Declaration , Arithmetic Operation , Address Constraint DPU Chain and DPU Internal Scalar Register describe how to use pragmas to allocate and bind resources. Some other usage of pragma also exist, check section Resource Sharing Region for more detail. Variable Declaration Variables supported by Vesyla are vectored Register file variables and SRAM variables. Register file variables will bind to register file and SRAM variables will bind to DiMArch. Since matlab dosen't require variable declaration, we need to give initial value to declare them. You can use the standard initialization assignment for matlab 1-D arry to declare a variable. Function such as zeros() and ones() are also supported. Following example shows how to define a register file variable and a SRAM variable: Example 1 2 x = zeros ( 1 , 5 ); %! REFI[0,0] y = [ 1 : 16 ]; %! MEM[0,0] Be careful, since DiMArch only support whole line reading and writing, the SRAM variable you defined should always have multiple of 16 elements. In theory, both register file varialbe and SRAM variable can be initialized by testbench generated by Vesyla. But you should avoid to initialize register file varialbe with value other than 0. Vector Slicing and Address Generation Each DPU can only process one scalar data each time, so the vectored register variable should be slice first before sending to DPU. The slicing operation is mapped on AGU by REFI instruction. While writing matlab code, you don't have to worry about the slicing since matlab directly support vector slicing. Here is an example of slicing a vector: Example 1 2 3 x = [ 1 : 5 ]; %! REFI[0,0] y = [ 1 : 5 ]; %! REFI[0,0] y ( 1 : 5 ) = x ( 1 : 5 ) + y ( 1 : 5 ); %! DPU[0,0] If you don't use any slicing and directly feed a vectored register variable to arithmetic operaion, Vesyla will use the full range of that variable. When slicing a SRAM varialbe, the minimal slice should always be multiple of 16. Except for the matlab default slicing method, you can also use two primitive AGU function to linear slice a vectored varialbe both in 1-D or 2-D. Example is given below. All address sequence in the following example are \"1,2,3,4,5\". Example 1 2 3 x = [ 1 : 5 ]; %! REFI[0,0] y = [ 1 : 5 ]; %! REFI[0,0] y ( 1 : 5 ) = x ( silago_agu_linear_1d ( 1 , 1 , 5 )) + y ( silago_agu_linear_2d ( 1 , 0 , 1 , 1 , 5 )); %! DPU[0,0] Arithmetic Operation Certain type of arithmetic operations are supported by Vesyla. They are addition, subtraction, dot multiplication, sum, abs, etc. Special arithmetic operation need to be mapped to special DPU mode by primitive function call, see section Primitive Function . Bug Symbol ~ is not supported yet! For arithmetic assignment, you can have a multiple variables as output depending on the DPU mode. The ignored output can be muted by symbol ~ . Arithmetic operation need a computation resource to perform required operation, that is the DPU. So, every arithmetic operation need to bind to a DPU resource via pragma. Example of an arithmetic assignment is demonstrated as following: Example 1 2 3 x = [ 1 : 5 ]; %! REFI[0,0] y = [ 1 : 5 ]; %! REFI[0,0] y ( 1 : 5 ) = x ( 1 : 5 ) + y ( 1 : 5 ); %! DPU[0,0] Static Loop Vesyla accept all static loops. A static loop should have constant start point, static increment as well as static iteration. If an expression that can be simplified to a constant number, it also considered as constant, hence can be used in static loop. Example below shows how to use a static loop. Example 1 2 3 4 n = 3 ; for i = 1 : 1 : n + 1 ... end Dynamic Loop Bug Vesyla has bug when dealing with dynamic loops. Vesyla support limited dynamic loops. Dynamic loop can have dynamic start point, and dynamic iteration. However, those number should be in address domain, a.k.a computed by RACCU and is fully determinastic after unrolling all the loops. Example of such dynamic loop is shown below: Example 1 2 3 4 5 for i = 1 : 1 : 4 for j = i : 1 : i + 3 ... end end Branch Bug Vesyla has bug when dealing with branches. Vesyla support normal matlab branch except for both operands of condition are constants. The usage of branch is the same as the original matlab code. For example: Example 1 2 3 4 5 6 7 8 x = [ 1 : 5 ]; %! REFI[0,0] y = [ 1 : 5 ]; %! REFI[0,0] w = [ 3 , 5 ]; %! REFI[0,0] if w ( 1 ) > w ( 2 ) y = x ; else y = x + y ; %! DPU[0,0] end Address Constraint Address constraints are parameters used by address generation in AGU. Address constraints can be constant or RACCU variable calculated at run-time in RACCU. Dynamic address constraint variables are usually used in loops. Example below shows how to use a RACCU variable to serve as address constraint. Example 1 2 3 4 5 6 7 x = [ 1 : 5 ]; %! REFI[0,0] y = [ 1 : 16 ]; %! REFI[0,0] a = 1 ; %! RACCU_VAR for i = 1 : 1 : 4 y ( a + 1 : a + 1 + 5 ) = x ( 1 : 5 ) + y ( a : a + 5 ); %! DPU[0,0] a = a + 1 ; end Advanced Features Macro Vesyla support symbolic expression to enable fast design space exploration. One of the technique is to use macros. Before the lexecal analysis, vesyla will expand all macro to normal program code. Macro gives programmer the tool to generate multiple program with small variations. Programmer need to provide a template and a series of data. Data is organized in json format and will be loaded in to evaluate those macros defined in template. Template use a grammar like the templating package inja . Infact, vesyla directly use inja library to evaluate macros. Example below demonstrate how to define a loop in template: Example An template file defined as following: 1 2 3 4 { % for x in range(par_col) %} x0_mem_ {{ x }} = [ 1 : n / col ]; %! MEM[0, {{x}}] y0_mem_ {{ x }} = [ 1 : n / col ]; %! MEM[0, {{x}}] { % endfor %} With a json-formated data file: 1 { \"par_col\" : 2 } This template will generate a real matlab code as following by expanding the FOR-LOOP macro: 1 2 3 4 x0_mem_0 = [ 1 : n / col ]; %! MEM[0, 0] y0_mem_0 = [ 1 : n / col ]; %! MEM[0, 0] x0_mem_1 = [ 1 : n / col ]; %! MEM[0, 1] y0_mem_1 = [ 1 : n / col ]; %! MEM[0, 1] Tip More complex usage please visit inja website. Primitive Function Primitive DPU functions are functions that corresponds to a complete DPU mode. Different DPUs targeting on different application domain may have some special modes specifically made for such application domain. For example, sigmoid function for neural network application. Those primitive function is not directly supported by matlab, but they are supported by vesyla. To use a specific DPU mode as primitive function, first you need to make sure the DRRA cell you are using has such mode. Then you need to change the configuration of vesyla to recongnize such mode. The configuration file is $Vesyla_root/config/primitive_func_def.xml . Finally, you can use the function inside your program. All primitive DPU functions have name should start with silago_dpu_ to be accepted by Vesyla. Example of using primitive DPU function: Example 1 2 x = [ 1 : 5 ]; %! REFI[0,0] x = silago_dpu_sigmoid ( x ); %! DPU[0,0] AUGs also have special primitive functions to express the complex addressing mode. But AGU primitive functions are not custom. There are two AGU primitive function: silago_agu_linear_1d() and silago_agu_linear_2d() . More AGU primitive functions will be added if some application domain requires. Example of using primitive DPU function: Example 1 2 3 x = [ 1 : 5 ]; %! REFI[0,0] a = [ 1 ]; %! REFI[0,0] x = x + a ( silago_agu_linear_1d ( 1 , 0 , 5 )); %! DPU[0,0] Resource Sharing Region When multiple operations need some common operands, due to the limit of the number of reading ports, those operations can't happen at the same time in normal condition. Resource sharing region tries to solve the problem. By enabling the broadcasting mechanism, all operation will recieve the same common operand at the same time generated by single reading port of the register file. The datapath of transmitting the common operand is now shared among those operations. Resource sharing region requires a fixed datapath layout. Dynamic change of datapath structure is forbidden inside resource sharing region. So, you should only use it when needed. Following example shows how to active resource sharing region. Example 1 2 3 4 5 6 7 8 9 10 11 12 x0 = [ 1 : 5 ]; %! REFI[0,0] x1 = [ 1 : 5 ]; %! REFI[1,0] a2 = [ 1 : 5 ]; %! REFI[2,0] x3 = [ 1 : 5 ]; %! REFI[3,0] x4 = [ 1 : 5 ]; %! REFI[4,0] %! RESOURCE_SHARING_BEGIN x0 = x0 + a2 ; %! DPU[0,0] x1 = x1 + a2 ; %! DPU[1,0] x3 = x3 + a2 ; %! DPU[3,0] x4 = x4 + a2 ; %! DPU[4,0] %! RESOURCE_SHARING_END DPU Chain Datapath can be configured as a chain of DPU operation. The output of the previous DPU will immediately enter the next DPU without any register file involved in between. Consider we want to compute a vector addition and a sigmoid function: z = \\sigma (x+y) z = \\sigma (x+y) . We can employ two DPUs to perform the complete operation in pipelined fashion. By writing the matlab like the following, you can enable the feature. Example 1 2 3 4 5 6 7 x = [ 1 : 5 ]; %! REFI[0,0] y = [ 1 : 5 ]; %! REFI[0,0] z = [ 1 : 5 ]; %! REFI[0,0] t = zeros ( 1 , 5 ); %! CDPU[0,0] t = x + y ; z = silago_dpu_sigmoid ( t ); %! DPU[1,0] DPU Internal Scalar Register Inside each DPU, there are two internal scalar registers which can be explicitly used via high-level matlab program. One can use them by declearing them with the pragma %! CDPU[row, col] . The available functions to load and store values to/from internal scalar registers are: 1 2 3 4 5 6 r0 = silago_dpu_load_reg_0 ( x ( 1 )); r1 = silago_dpu_load_reg_1 ( x ( 1 )); [ r0 , r1 ] = silago_dpu_load_reg_both ( x ( 1 ), x ( 2 )); x ( 1 ) = silago_dpu_load_store_0 ( r0 ); x ( 1 ) = silago_dpu_load_store_1 ( r1 ); [ x ( 1 ), y ( 1 )] = silago_dpu_load_store_both ( r0 , r1 ); Warning Programmer should keep in mind that lifetime and physical location of those variable. Vesyla has very weak semantic checking on those internal scalar register variables. Example For example, if one want to calculate a function: y = ax.y y = ax.y . Instead of put the coefficient a a inside a normal register and waste other register entries of the same register block, you can put the coefficient to the internal register, and configure DPU to a scaled multiplication mode to get the correct result. 1 2 3 4 5 6 7 8 9 10 11 12 13 a_mem = [ 1 : 16 ]; %! SRAM[0,0] x_mem = [ 1 : 16 ]; %! SRAM[0,0] y_mem = [ 1 : 16 ]; %! SRAM[0,0] x = [ 1 : 16 ]; %! REFI[0,0] y = [ 1 : 16 ]; %! REFI[0,0] r = zeros ( 1 , 1 ); %! CDPU[0,0] x = a_mem ; r = silago_dpu_load_reg_1 ( x ( 1 )); x = x_mem ; y = y_mem ; y = silago_dpu_scaled_mul ( x , y , r ); %! DPU[0,0] y_mem = y ; Not Supported Some matlab code is not accepted by Vesyla because it can't execute on DRRA fabric. They are: While-loop. For-loop inside branch. Arithmetic statement that can't be mapped to single DPU mode. Normal function call except for primitive function call. Indirect addressing.","title":"Programming Guide"},{"location":"Docs/ToolChain/Vesyla/ProgrammingGuide/#programming-guide","text":"","title":"Programming Guide"},{"location":"Docs/ToolChain/Vesyla/ProgrammingGuide/#basics","text":"","title":"Basics"},{"location":"Docs/ToolChain/Vesyla/ProgrammingGuide/#general-guide","text":"Vesyla accept modified matlab code as input language. You shouldn't write the matlab code like a programming language. You should instead use it as a tool to model the behaviour of the hardware. Vesyla supports small portion of matlab grammar. There are some generic rules expressing the programming style vesyla accepts. General function call is not allowed unless the function is predefined as primitive function. Variable except for constant variable and loop iterator should always be decleared via pragma. Statement should always ends with semicolon ( ; ) to avoid unexpected outputs while simulating in matlab.","title":"General Guide"},{"location":"Docs/ToolChain/Vesyla/ProgrammingGuide/#pragma","text":"Pragma is the notation that guides Vesyla during synthesis process. Vesyla recongnize pragma starting with symbols %! . The main function of pragmas is specify allocation and binding information since Vesyla can't perform automatic allocation and binding. Section Variable Declaration , Arithmetic Operation , Address Constraint DPU Chain and DPU Internal Scalar Register describe how to use pragmas to allocate and bind resources. Some other usage of pragma also exist, check section Resource Sharing Region for more detail.","title":"Pragma"},{"location":"Docs/ToolChain/Vesyla/ProgrammingGuide/#variable-declaration","text":"Variables supported by Vesyla are vectored Register file variables and SRAM variables. Register file variables will bind to register file and SRAM variables will bind to DiMArch. Since matlab dosen't require variable declaration, we need to give initial value to declare them. You can use the standard initialization assignment for matlab 1-D arry to declare a variable. Function such as zeros() and ones() are also supported. Following example shows how to define a register file variable and a SRAM variable: Example 1 2 x = zeros ( 1 , 5 ); %! REFI[0,0] y = [ 1 : 16 ]; %! MEM[0,0] Be careful, since DiMArch only support whole line reading and writing, the SRAM variable you defined should always have multiple of 16 elements. In theory, both register file varialbe and SRAM variable can be initialized by testbench generated by Vesyla. But you should avoid to initialize register file varialbe with value other than 0.","title":"Variable Declaration"},{"location":"Docs/ToolChain/Vesyla/ProgrammingGuide/#vector-slicing-and-address-generation","text":"Each DPU can only process one scalar data each time, so the vectored register variable should be slice first before sending to DPU. The slicing operation is mapped on AGU by REFI instruction. While writing matlab code, you don't have to worry about the slicing since matlab directly support vector slicing. Here is an example of slicing a vector: Example 1 2 3 x = [ 1 : 5 ]; %! REFI[0,0] y = [ 1 : 5 ]; %! REFI[0,0] y ( 1 : 5 ) = x ( 1 : 5 ) + y ( 1 : 5 ); %! DPU[0,0] If you don't use any slicing and directly feed a vectored register variable to arithmetic operaion, Vesyla will use the full range of that variable. When slicing a SRAM varialbe, the minimal slice should always be multiple of 16. Except for the matlab default slicing method, you can also use two primitive AGU function to linear slice a vectored varialbe both in 1-D or 2-D. Example is given below. All address sequence in the following example are \"1,2,3,4,5\". Example 1 2 3 x = [ 1 : 5 ]; %! REFI[0,0] y = [ 1 : 5 ]; %! REFI[0,0] y ( 1 : 5 ) = x ( silago_agu_linear_1d ( 1 , 1 , 5 )) + y ( silago_agu_linear_2d ( 1 , 0 , 1 , 1 , 5 )); %! DPU[0,0]","title":"Vector Slicing and Address Generation"},{"location":"Docs/ToolChain/Vesyla/ProgrammingGuide/#arithmetic-operation","text":"Certain type of arithmetic operations are supported by Vesyla. They are addition, subtraction, dot multiplication, sum, abs, etc. Special arithmetic operation need to be mapped to special DPU mode by primitive function call, see section Primitive Function . Bug Symbol ~ is not supported yet! For arithmetic assignment, you can have a multiple variables as output depending on the DPU mode. The ignored output can be muted by symbol ~ . Arithmetic operation need a computation resource to perform required operation, that is the DPU. So, every arithmetic operation need to bind to a DPU resource via pragma. Example of an arithmetic assignment is demonstrated as following: Example 1 2 3 x = [ 1 : 5 ]; %! REFI[0,0] y = [ 1 : 5 ]; %! REFI[0,0] y ( 1 : 5 ) = x ( 1 : 5 ) + y ( 1 : 5 ); %! DPU[0,0]","title":"Arithmetic Operation"},{"location":"Docs/ToolChain/Vesyla/ProgrammingGuide/#static-loop","text":"Vesyla accept all static loops. A static loop should have constant start point, static increment as well as static iteration. If an expression that can be simplified to a constant number, it also considered as constant, hence can be used in static loop. Example below shows how to use a static loop. Example 1 2 3 4 n = 3 ; for i = 1 : 1 : n + 1 ... end","title":"Static Loop"},{"location":"Docs/ToolChain/Vesyla/ProgrammingGuide/#dynamic-loop","text":"Bug Vesyla has bug when dealing with dynamic loops. Vesyla support limited dynamic loops. Dynamic loop can have dynamic start point, and dynamic iteration. However, those number should be in address domain, a.k.a computed by RACCU and is fully determinastic after unrolling all the loops. Example of such dynamic loop is shown below: Example 1 2 3 4 5 for i = 1 : 1 : 4 for j = i : 1 : i + 3 ... end end","title":"Dynamic Loop"},{"location":"Docs/ToolChain/Vesyla/ProgrammingGuide/#branch","text":"Bug Vesyla has bug when dealing with branches. Vesyla support normal matlab branch except for both operands of condition are constants. The usage of branch is the same as the original matlab code. For example: Example 1 2 3 4 5 6 7 8 x = [ 1 : 5 ]; %! REFI[0,0] y = [ 1 : 5 ]; %! REFI[0,0] w = [ 3 , 5 ]; %! REFI[0,0] if w ( 1 ) > w ( 2 ) y = x ; else y = x + y ; %! DPU[0,0] end","title":"Branch"},{"location":"Docs/ToolChain/Vesyla/ProgrammingGuide/#address-constraint","text":"Address constraints are parameters used by address generation in AGU. Address constraints can be constant or RACCU variable calculated at run-time in RACCU. Dynamic address constraint variables are usually used in loops. Example below shows how to use a RACCU variable to serve as address constraint. Example 1 2 3 4 5 6 7 x = [ 1 : 5 ]; %! REFI[0,0] y = [ 1 : 16 ]; %! REFI[0,0] a = 1 ; %! RACCU_VAR for i = 1 : 1 : 4 y ( a + 1 : a + 1 + 5 ) = x ( 1 : 5 ) + y ( a : a + 5 ); %! DPU[0,0] a = a + 1 ; end","title":"Address Constraint"},{"location":"Docs/ToolChain/Vesyla/ProgrammingGuide/#advanced-features","text":"","title":"Advanced Features"},{"location":"Docs/ToolChain/Vesyla/ProgrammingGuide/#macro","text":"Vesyla support symbolic expression to enable fast design space exploration. One of the technique is to use macros. Before the lexecal analysis, vesyla will expand all macro to normal program code. Macro gives programmer the tool to generate multiple program with small variations. Programmer need to provide a template and a series of data. Data is organized in json format and will be loaded in to evaluate those macros defined in template. Template use a grammar like the templating package inja . Infact, vesyla directly use inja library to evaluate macros. Example below demonstrate how to define a loop in template: Example An template file defined as following: 1 2 3 4 { % for x in range(par_col) %} x0_mem_ {{ x }} = [ 1 : n / col ]; %! MEM[0, {{x}}] y0_mem_ {{ x }} = [ 1 : n / col ]; %! MEM[0, {{x}}] { % endfor %} With a json-formated data file: 1 { \"par_col\" : 2 } This template will generate a real matlab code as following by expanding the FOR-LOOP macro: 1 2 3 4 x0_mem_0 = [ 1 : n / col ]; %! MEM[0, 0] y0_mem_0 = [ 1 : n / col ]; %! MEM[0, 0] x0_mem_1 = [ 1 : n / col ]; %! MEM[0, 1] y0_mem_1 = [ 1 : n / col ]; %! MEM[0, 1] Tip More complex usage please visit inja website.","title":"Macro"},{"location":"Docs/ToolChain/Vesyla/ProgrammingGuide/#primitive-function","text":"Primitive DPU functions are functions that corresponds to a complete DPU mode. Different DPUs targeting on different application domain may have some special modes specifically made for such application domain. For example, sigmoid function for neural network application. Those primitive function is not directly supported by matlab, but they are supported by vesyla. To use a specific DPU mode as primitive function, first you need to make sure the DRRA cell you are using has such mode. Then you need to change the configuration of vesyla to recongnize such mode. The configuration file is $Vesyla_root/config/primitive_func_def.xml . Finally, you can use the function inside your program. All primitive DPU functions have name should start with silago_dpu_ to be accepted by Vesyla. Example of using primitive DPU function: Example 1 2 x = [ 1 : 5 ]; %! REFI[0,0] x = silago_dpu_sigmoid ( x ); %! DPU[0,0] AUGs also have special primitive functions to express the complex addressing mode. But AGU primitive functions are not custom. There are two AGU primitive function: silago_agu_linear_1d() and silago_agu_linear_2d() . More AGU primitive functions will be added if some application domain requires. Example of using primitive DPU function: Example 1 2 3 x = [ 1 : 5 ]; %! REFI[0,0] a = [ 1 ]; %! REFI[0,0] x = x + a ( silago_agu_linear_1d ( 1 , 0 , 5 )); %! DPU[0,0]","title":"Primitive Function"},{"location":"Docs/ToolChain/Vesyla/ProgrammingGuide/#resource-sharing-region","text":"When multiple operations need some common operands, due to the limit of the number of reading ports, those operations can't happen at the same time in normal condition. Resource sharing region tries to solve the problem. By enabling the broadcasting mechanism, all operation will recieve the same common operand at the same time generated by single reading port of the register file. The datapath of transmitting the common operand is now shared among those operations. Resource sharing region requires a fixed datapath layout. Dynamic change of datapath structure is forbidden inside resource sharing region. So, you should only use it when needed. Following example shows how to active resource sharing region. Example 1 2 3 4 5 6 7 8 9 10 11 12 x0 = [ 1 : 5 ]; %! REFI[0,0] x1 = [ 1 : 5 ]; %! REFI[1,0] a2 = [ 1 : 5 ]; %! REFI[2,0] x3 = [ 1 : 5 ]; %! REFI[3,0] x4 = [ 1 : 5 ]; %! REFI[4,0] %! RESOURCE_SHARING_BEGIN x0 = x0 + a2 ; %! DPU[0,0] x1 = x1 + a2 ; %! DPU[1,0] x3 = x3 + a2 ; %! DPU[3,0] x4 = x4 + a2 ; %! DPU[4,0] %! RESOURCE_SHARING_END","title":"Resource Sharing Region"},{"location":"Docs/ToolChain/Vesyla/ProgrammingGuide/#dpu-chain","text":"Datapath can be configured as a chain of DPU operation. The output of the previous DPU will immediately enter the next DPU without any register file involved in between. Consider we want to compute a vector addition and a sigmoid function: z = \\sigma (x+y) z = \\sigma (x+y) . We can employ two DPUs to perform the complete operation in pipelined fashion. By writing the matlab like the following, you can enable the feature. Example 1 2 3 4 5 6 7 x = [ 1 : 5 ]; %! REFI[0,0] y = [ 1 : 5 ]; %! REFI[0,0] z = [ 1 : 5 ]; %! REFI[0,0] t = zeros ( 1 , 5 ); %! CDPU[0,0] t = x + y ; z = silago_dpu_sigmoid ( t ); %! DPU[1,0]","title":"DPU Chain"},{"location":"Docs/ToolChain/Vesyla/ProgrammingGuide/#dpu-internal-scalar-register","text":"Inside each DPU, there are two internal scalar registers which can be explicitly used via high-level matlab program. One can use them by declearing them with the pragma %! CDPU[row, col] . The available functions to load and store values to/from internal scalar registers are: 1 2 3 4 5 6 r0 = silago_dpu_load_reg_0 ( x ( 1 )); r1 = silago_dpu_load_reg_1 ( x ( 1 )); [ r0 , r1 ] = silago_dpu_load_reg_both ( x ( 1 ), x ( 2 )); x ( 1 ) = silago_dpu_load_store_0 ( r0 ); x ( 1 ) = silago_dpu_load_store_1 ( r1 ); [ x ( 1 ), y ( 1 )] = silago_dpu_load_store_both ( r0 , r1 ); Warning Programmer should keep in mind that lifetime and physical location of those variable. Vesyla has very weak semantic checking on those internal scalar register variables. Example For example, if one want to calculate a function: y = ax.y y = ax.y . Instead of put the coefficient a a inside a normal register and waste other register entries of the same register block, you can put the coefficient to the internal register, and configure DPU to a scaled multiplication mode to get the correct result. 1 2 3 4 5 6 7 8 9 10 11 12 13 a_mem = [ 1 : 16 ]; %! SRAM[0,0] x_mem = [ 1 : 16 ]; %! SRAM[0,0] y_mem = [ 1 : 16 ]; %! SRAM[0,0] x = [ 1 : 16 ]; %! REFI[0,0] y = [ 1 : 16 ]; %! REFI[0,0] r = zeros ( 1 , 1 ); %! CDPU[0,0] x = a_mem ; r = silago_dpu_load_reg_1 ( x ( 1 )); x = x_mem ; y = y_mem ; y = silago_dpu_scaled_mul ( x , y , r ); %! DPU[0,0] y_mem = y ;","title":"DPU Internal Scalar Register"},{"location":"Docs/ToolChain/Vesyla/ProgrammingGuide/#not-supported","text":"Some matlab code is not accepted by Vesyla because it can't execute on DRRA fabric. They are: While-loop. For-loop inside branch. Arithmetic statement that can't be mapped to single DPU mode. Normal function call except for primitive function call. Indirect addressing.","title":"Not Supported"},{"location":"Docs/ToolChain/Vesyla/Scheduling/","text":"Scheduling Problem Defination In Vesyla, the generated instructions have fairly long life-time and are highly cooperative. Which means they are not just single-cycle actors with simple precedency relation that fight for resources. Instructions running in DRRA microthreads might actively coordinate themselves with other instructions executing in some other microthreads. Cooperation with other instructions can happen at any time when an instruction is alive and it can happen multiple times with multiple different other instructions. Further more, the life-time of an instruction in Vesyla can be undetermined and depend on other instructions in terms of both precedency relation and resource availability. To simplify the scenario a little bit, we consider the critical points of those instructions as the atomic unit objects (jobs/actors/operations) that need to be scheduled in the cooperative instruction scheduling problem which will be defined later. What are the critical points? They can be starting and ending point of instructions. They can be the time points when a instruction change its resource usage. They can be the time points when a instruction need to coordinate with other instructions. In short, whenever an instruction changes anything, it's a critical point. Critical points don't have execution duration, it just represents a timestamp. However, critical points can have resoure usage attached to it. Resource usage requires time duration. With the usage of critical points, a new phenominal appears. Some instructions can have undetermined life-time before scheduling. When those instructions are broken down into critical points, the resource usage of those critical points need special treatment since their usage duration are undetermined. We need to assign a LOCK resource usage frame to the critical point starting to use the resource and a KEY resource usage frame to the critical point finishing to use the resource. The resource between LOCK and KEY frame during scheding should be marked unavailable to other critical points. Cooperative instruction scheduling problem thus is very different from the classic instruction scheduling problem. In classic instruction scheduling problem, either positive or negative time-lag exists between a pair of instructions. While between a cooperative critical points pair, both minimal and maximum time-lag may exist, which constrants the precedence relation to a possibly closed time frame. A special case is when minimal and maximum time-lag are equal, representing the two critical points will have an exact time difference. The introduce of LOCK and KEY frame for resource usage is also very different from conventional instruction scheduling problem. Now, we formally define the scheduling model and the scheduling problem. Warning MODEL AND PROBLEM DEFINATION Problem Simplification The scheduling model defined above can not be used directly because it's high complexity creates a vast solution space and scheduling algorithm will have hard time to navigate to the correct direction. Therefore, we propose one assumption and four simplification step to simplify the model. The simplification processes transform the model to equivalent but simpler model hence shrink the solution space. Delay bound assumption Delay bounds of an edge in depenency graph can be either negative or positive as long as the higher bound d_h d_h is not less than lower bound d_l d_l . An edge with d_l=-\\infty d_l=-\\infty or with d_l\\le d_h \\lt 0 d_l\\le d_h \\lt 0 can be easily converted to an edge with d_l\\neq -\\infty d_l\\neq -\\infty and d_h\\ge 0 d_h\\ge 0 . Therefore, we assume that: every edge in dependency graph will have a delay bounds satisfying d_l\\neq -\\infty d_l\\neq -\\infty , d_h\\ge 0 d_h\\ge 0 and d_l\\le d_h d_l\\le d_h . Parking Hard-links Hard-links are edges with constant delay ( d_l=d_h d_l=d_h ). For example, A\\xrightarrow[]{\\text{[w,w]}}B A\\xrightarrow[]{\\text{[w,w]}}B is a hard-link, it describs the constraint that the schedule time of B is exactly w w cycles after the schedule time of A. All vertices linked by hard-links should be scheduled together, because if any vertex has been scheduled, the schedule time of other vertices which directly or indirectly linked to the scheduled vertex can be determined immediately. Therefore, packing hard-linked vertices together can reduce the size of graph and accelerate the scheduling process. Pseudo Algorithm is shown below: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 Graph packing_hard_links ( Graph g ){ Graph g1 = remove_soft_links ( g ); Component C = find_connected_components ( g1 ); Graph g2 ; for ( auto c : C ){ vector < Vertex , int > offset_map = find_offset_for_each_vertex ( c ); Vertex vc ; Graph g3 ; for ( auto v : c . vertices ()){ v . schedule_time = offset_map ( v ); g3 . add_vertex ( v ); } vc . add_child ( g3 ) g2 . add_vertex ( vc ); } for ( auto e : edges ( g )){ if ( is_soft_link ( e ) && in_different_component ( e . src , e . dest )){ Edge e1 = reshape_edge_accroding_to_g2 ( e ); g2 . add_edge ( e1 ); } } return g2 ; } Remove Redundant Links Pseudo Algorithm is shown below: Solution Space Exploration","title":"Scheduling"},{"location":"Docs/ToolChain/Vesyla/Scheduling/#scheduling","text":"","title":"Scheduling"},{"location":"Docs/ToolChain/Vesyla/Scheduling/#problem-defination","text":"In Vesyla, the generated instructions have fairly long life-time and are highly cooperative. Which means they are not just single-cycle actors with simple precedency relation that fight for resources. Instructions running in DRRA microthreads might actively coordinate themselves with other instructions executing in some other microthreads. Cooperation with other instructions can happen at any time when an instruction is alive and it can happen multiple times with multiple different other instructions. Further more, the life-time of an instruction in Vesyla can be undetermined and depend on other instructions in terms of both precedency relation and resource availability. To simplify the scenario a little bit, we consider the critical points of those instructions as the atomic unit objects (jobs/actors/operations) that need to be scheduled in the cooperative instruction scheduling problem which will be defined later. What are the critical points? They can be starting and ending point of instructions. They can be the time points when a instruction change its resource usage. They can be the time points when a instruction need to coordinate with other instructions. In short, whenever an instruction changes anything, it's a critical point. Critical points don't have execution duration, it just represents a timestamp. However, critical points can have resoure usage attached to it. Resource usage requires time duration. With the usage of critical points, a new phenominal appears. Some instructions can have undetermined life-time before scheduling. When those instructions are broken down into critical points, the resource usage of those critical points need special treatment since their usage duration are undetermined. We need to assign a LOCK resource usage frame to the critical point starting to use the resource and a KEY resource usage frame to the critical point finishing to use the resource. The resource between LOCK and KEY frame during scheding should be marked unavailable to other critical points. Cooperative instruction scheduling problem thus is very different from the classic instruction scheduling problem. In classic instruction scheduling problem, either positive or negative time-lag exists between a pair of instructions. While between a cooperative critical points pair, both minimal and maximum time-lag may exist, which constrants the precedence relation to a possibly closed time frame. A special case is when minimal and maximum time-lag are equal, representing the two critical points will have an exact time difference. The introduce of LOCK and KEY frame for resource usage is also very different from conventional instruction scheduling problem. Now, we formally define the scheduling model and the scheduling problem. Warning MODEL AND PROBLEM DEFINATION","title":"Problem Defination"},{"location":"Docs/ToolChain/Vesyla/Scheduling/#problem-simplification","text":"The scheduling model defined above can not be used directly because it's high complexity creates a vast solution space and scheduling algorithm will have hard time to navigate to the correct direction. Therefore, we propose one assumption and four simplification step to simplify the model. The simplification processes transform the model to equivalent but simpler model hence shrink the solution space.","title":"Problem Simplification"},{"location":"Docs/ToolChain/Vesyla/Scheduling/#delay-bound-assumption","text":"Delay bounds of an edge in depenency graph can be either negative or positive as long as the higher bound d_h d_h is not less than lower bound d_l d_l . An edge with d_l=-\\infty d_l=-\\infty or with d_l\\le d_h \\lt 0 d_l\\le d_h \\lt 0 can be easily converted to an edge with d_l\\neq -\\infty d_l\\neq -\\infty and d_h\\ge 0 d_h\\ge 0 . Therefore, we assume that: every edge in dependency graph will have a delay bounds satisfying d_l\\neq -\\infty d_l\\neq -\\infty , d_h\\ge 0 d_h\\ge 0 and d_l\\le d_h d_l\\le d_h .","title":"Delay bound assumption"},{"location":"Docs/ToolChain/Vesyla/Scheduling/#parking-hard-links","text":"Hard-links are edges with constant delay ( d_l=d_h d_l=d_h ). For example, A\\xrightarrow[]{\\text{[w,w]}}B A\\xrightarrow[]{\\text{[w,w]}}B is a hard-link, it describs the constraint that the schedule time of B is exactly w w cycles after the schedule time of A. All vertices linked by hard-links should be scheduled together, because if any vertex has been scheduled, the schedule time of other vertices which directly or indirectly linked to the scheduled vertex can be determined immediately. Therefore, packing hard-linked vertices together can reduce the size of graph and accelerate the scheduling process. Pseudo Algorithm is shown below: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 Graph packing_hard_links ( Graph g ){ Graph g1 = remove_soft_links ( g ); Component C = find_connected_components ( g1 ); Graph g2 ; for ( auto c : C ){ vector < Vertex , int > offset_map = find_offset_for_each_vertex ( c ); Vertex vc ; Graph g3 ; for ( auto v : c . vertices ()){ v . schedule_time = offset_map ( v ); g3 . add_vertex ( v ); } vc . add_child ( g3 ) g2 . add_vertex ( vc ); } for ( auto e : edges ( g )){ if ( is_soft_link ( e ) && in_different_component ( e . src , e . dest )){ Edge e1 = reshape_edge_accroding_to_g2 ( e ); g2 . add_edge ( e1 ); } } return g2 ; }","title":"Parking Hard-links"},{"location":"Docs/ToolChain/Vesyla/Scheduling/#remove-redundant-links","text":"Pseudo Algorithm is shown below:","title":"Remove Redundant Links"},{"location":"Docs/ToolChain/Vesyla/Scheduling/#solution-space-exploration","text":"","title":"Solution Space Exploration"},{"location":"Docs/ToolChain/Vesyla/Tutorial/","text":"Vesyla tutorial Working environment OS : Linux Software : Matlab QuestaSim File structure 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 $VesylaRoot/ |- src/ | |- all source files. | |- config/ | |- some configuration files | |- autotest/ | |- some scripts for auto testing. | |- testcases/ | |- cmake/ |- clean |- build/ |- compilation working directory Compile Vesyla First, install compilation tool chain. You need to use the correct package manager of your Linux distribution. The needed packages include: g++ (version 5 or above), make, cmake, boost liabrires, gecode. Here, we give the example command for Fedora Linux. 1 sudo yum install g ++ make cmake boost-devel Gecode is not really necessary, Vesyla only use it for CP scheduling engine. You can install it according to the installation instruction on the official website: https://www.gecode.org/ Then, you create working directory build . 1 2 3 cd $VesylaRoot mkdir build cd build Next step is to generate makefile according to the CMake configuration file CMakeLists.txt. 1 cmake .. Now, it's time to compile vesyla. 1 make After a while, the executable file named as \"vesyla\" should appear in the build directory. Write the source code Please Check the Programming Guide . Compilation and simulation Use automatic test framework A bash script called $VesylaRoot/autotest/testall.sh is provided to automatically test many testcases. Put all your testcases (matlab file) in $VesylaRoot/autotest/testcases/ directory, the script will test all of them and generate a report in the same directory. The script uses Robot Framework to manage the test process and to generate result. To run the test script, use command: 1 . / testall Use automatic test script to test single testcase Script using test framework can test many testcases, but it will not print out detailed information. If you want to test single testcases, there is a provided bash script. It automatically compile your matlab file, prepare simulation environment and perform the matlab and RTL simulation, and finally compare the result. The script is called $VesylaRoot/autotest/run.sh . To use it, use the command below: 1 . / run - c - f $PathToSiLagoFabric $PathToYourMatlabFile -c parameter try to compile Vesyla everytime in case Vesyla is modified, -f $PathToSiLagoFabric parameter indicates the RTL description of the SiLago fabric used for RTL simulation. After the script has been executed, a message \"SUCCESS\" or \"FAIL\" will show at the end to report whether the source file is correct or not. Manually testing Warning Too complicated to explain, update later. Important output files Warning Update later.","title":"Vesyla tutorial"},{"location":"Docs/ToolChain/Vesyla/Tutorial/#vesyla-tutorial","text":"","title":"Vesyla tutorial"},{"location":"Docs/ToolChain/Vesyla/Tutorial/#working-environment","text":"OS : Linux Software : Matlab QuestaSim","title":"Working environment"},{"location":"Docs/ToolChain/Vesyla/Tutorial/#file-structure","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 $VesylaRoot/ |- src/ | |- all source files. | |- config/ | |- some configuration files | |- autotest/ | |- some scripts for auto testing. | |- testcases/ | |- cmake/ |- clean |- build/ |- compilation working directory","title":"File structure"},{"location":"Docs/ToolChain/Vesyla/Tutorial/#compile-vesyla","text":"First, install compilation tool chain. You need to use the correct package manager of your Linux distribution. The needed packages include: g++ (version 5 or above), make, cmake, boost liabrires, gecode. Here, we give the example command for Fedora Linux. 1 sudo yum install g ++ make cmake boost-devel Gecode is not really necessary, Vesyla only use it for CP scheduling engine. You can install it according to the installation instruction on the official website: https://www.gecode.org/ Then, you create working directory build . 1 2 3 cd $VesylaRoot mkdir build cd build Next step is to generate makefile according to the CMake configuration file CMakeLists.txt. 1 cmake .. Now, it's time to compile vesyla. 1 make After a while, the executable file named as \"vesyla\" should appear in the build directory.","title":"Compile Vesyla"},{"location":"Docs/ToolChain/Vesyla/Tutorial/#write-the-source-code","text":"Please Check the Programming Guide .","title":"Write the source code"},{"location":"Docs/ToolChain/Vesyla/Tutorial/#compilation-and-simulation","text":"","title":"Compilation and simulation"},{"location":"Docs/ToolChain/Vesyla/Tutorial/#use-automatic-test-framework","text":"A bash script called $VesylaRoot/autotest/testall.sh is provided to automatically test many testcases. Put all your testcases (matlab file) in $VesylaRoot/autotest/testcases/ directory, the script will test all of them and generate a report in the same directory. The script uses Robot Framework to manage the test process and to generate result. To run the test script, use command: 1 . / testall","title":"Use automatic test framework"},{"location":"Docs/ToolChain/Vesyla/Tutorial/#use-automatic-test-script-to-test-single-testcase","text":"Script using test framework can test many testcases, but it will not print out detailed information. If you want to test single testcases, there is a provided bash script. It automatically compile your matlab file, prepare simulation environment and perform the matlab and RTL simulation, and finally compare the result. The script is called $VesylaRoot/autotest/run.sh . To use it, use the command below: 1 . / run - c - f $PathToSiLagoFabric $PathToYourMatlabFile -c parameter try to compile Vesyla everytime in case Vesyla is modified, -f $PathToSiLagoFabric parameter indicates the RTL description of the SiLago fabric used for RTL simulation. After the script has been executed, a message \"SUCCESS\" or \"FAIL\" will show at the end to report whether the source file is correct or not.","title":"Use automatic test script to test single testcase"},{"location":"Docs/ToolChain/Vesyla/Tutorial/#manually-testing","text":"Warning Too complicated to explain, update later.","title":"Manually testing"},{"location":"Docs/ToolChain/Vesyla/Tutorial/#important-output-files","text":"Warning Update later.","title":"Important output files"}]}